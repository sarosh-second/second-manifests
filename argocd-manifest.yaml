apiVersion: v1
items:
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-10-07T18:49:31Z"
    generateName: argocd-application-controller-
    labels:
      app.kubernetes.io/name: argocd-application-controller
      apps.kubernetes.io/pod-index: "0"
      controller-revision-hash: argocd-application-controller-9f5c5c7c8
      statefulset.kubernetes.io/pod-name: argocd-application-controller-0
    name: argocd-application-controller-0
    namespace: argocd
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: StatefulSet
      name: argocd-application-controller
      uid: 50a068b9-3d28-411a-842b-719e1c15596f
    resourceVersion: "712125"
    uid: b4f65fc3-c1df-4f3f-ab9d-be6a158361fb
  spec:
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchLabels:
                app.kubernetes.io/name: argocd-application-controller
            topologyKey: kubernetes.io/hostname
          weight: 100
        - podAffinityTerm:
            labelSelector:
              matchLabels:
                app.kubernetes.io/part-of: argocd
            topologyKey: kubernetes.io/hostname
          weight: 5
    containers:
    - args:
      - /usr/local/bin/argocd-application-controller
      env:
      - name: REDIS_PASSWORD
        valueFrom:
          secretKeyRef:
            key: auth
            name: argocd-redis
      - name: ARGOCD_CONTROLLER_REPLICAS
        value: "1"
      - name: ARGOCD_RECONCILIATION_TIMEOUT
        valueFrom:
          configMapKeyRef:
            key: timeout.reconciliation
            name: argocd-cm
            optional: true
      - name: ARGOCD_HARD_RECONCILIATION_TIMEOUT
        valueFrom:
          configMapKeyRef:
            key: timeout.hard.reconciliation
            name: argocd-cm
            optional: true
      - name: ARGOCD_RECONCILIATION_JITTER
        valueFrom:
          configMapKeyRef:
            key: timeout.reconciliation.jitter
            name: argocd-cm
            optional: true
      - name: ARGOCD_REPO_ERROR_GRACE_PERIOD_SECONDS
        valueFrom:
          configMapKeyRef:
            key: controller.repo.error.grace.period.seconds
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_APPLICATION_CONTROLLER_REPO_SERVER
        valueFrom:
          configMapKeyRef:
            key: repo.server
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_APPLICATION_CONTROLLER_REPO_SERVER_TIMEOUT_SECONDS
        valueFrom:
          configMapKeyRef:
            key: controller.repo.server.timeout.seconds
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_APPLICATION_CONTROLLER_STATUS_PROCESSORS
        valueFrom:
          configMapKeyRef:
            key: controller.status.processors
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_APPLICATION_CONTROLLER_OPERATION_PROCESSORS
        valueFrom:
          configMapKeyRef:
            key: controller.operation.processors
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_APPLICATION_CONTROLLER_LOGFORMAT
        valueFrom:
          configMapKeyRef:
            key: controller.log.format
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_APPLICATION_CONTROLLER_LOGLEVEL
        valueFrom:
          configMapKeyRef:
            key: controller.log.level
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_APPLICATION_CONTROLLER_METRICS_CACHE_EXPIRATION
        valueFrom:
          configMapKeyRef:
            key: controller.metrics.cache.expiration
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_APPLICATION_CONTROLLER_SELF_HEAL_TIMEOUT_SECONDS
        valueFrom:
          configMapKeyRef:
            key: controller.self.heal.timeout.seconds
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_APPLICATION_CONTROLLER_REPO_SERVER_PLAINTEXT
        valueFrom:
          configMapKeyRef:
            key: controller.repo.server.plaintext
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_APPLICATION_CONTROLLER_REPO_SERVER_STRICT_TLS
        valueFrom:
          configMapKeyRef:
            key: controller.repo.server.strict.tls
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_APPLICATION_CONTROLLER_PERSIST_RESOURCE_HEALTH
        valueFrom:
          configMapKeyRef:
            key: controller.resource.health.persist
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_APP_STATE_CACHE_EXPIRATION
        valueFrom:
          configMapKeyRef:
            key: controller.app.state.cache.expiration
            name: argocd-cmd-params-cm
            optional: true
      - name: REDIS_SERVER
        valueFrom:
          configMapKeyRef:
            key: redis.server
            name: argocd-cmd-params-cm
            optional: true
      - name: REDIS_COMPRESSION
        valueFrom:
          configMapKeyRef:
            key: redis.compression
            name: argocd-cmd-params-cm
            optional: true
      - name: REDISDB
        valueFrom:
          configMapKeyRef:
            key: redis.db
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_DEFAULT_CACHE_EXPIRATION
        valueFrom:
          configMapKeyRef:
            key: controller.default.cache.expiration
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_APPLICATION_CONTROLLER_OTLP_ADDRESS
        valueFrom:
          configMapKeyRef:
            key: otlp.address
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_APPLICATION_CONTROLLER_OTLP_INSECURE
        valueFrom:
          configMapKeyRef:
            key: otlp.insecure
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_APPLICATION_CONTROLLER_OTLP_HEADERS
        valueFrom:
          configMapKeyRef:
            key: otlp.headers
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_APPLICATION_NAMESPACES
        valueFrom:
          configMapKeyRef:
            key: application.namespaces
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_CONTROLLER_SHARDING_ALGORITHM
        valueFrom:
          configMapKeyRef:
            key: controller.sharding.algorithm
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_APPLICATION_CONTROLLER_KUBECTL_PARALLELISM_LIMIT
        valueFrom:
          configMapKeyRef:
            key: controller.kubectl.parallelism.limit
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_K8SCLIENT_RETRY_MAX
        valueFrom:
          configMapKeyRef:
            key: controller.k8sclient.retry.max
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_K8SCLIENT_RETRY_BASE_BACKOFF
        valueFrom:
          configMapKeyRef:
            key: controller.k8sclient.retry.base.backoff
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_APPLICATION_CONTROLLER_SERVER_SIDE_DIFF
        valueFrom:
          configMapKeyRef:
            key: controller.diff.server.side
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_IGNORE_NORMALIZER_JQ_TIMEOUT
        valueFrom:
          configMapKeyRef:
            key: controller.ignore.normalizer.jq.timeout
            name: argocd-cmd-params-cm
            optional: true
      image: quay.io/argoproj/argocd:v2.12.3
      imagePullPolicy: Always
      name: argocd-application-controller
      ports:
      - containerPort: 8082
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 8082
          scheme: HTTP
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /app/config/controller/tls
        name: argocd-repo-server-tls
      - mountPath: /home/argocd
        name: argocd-home
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-x9lr4
        readOnly: true
      workingDir: /home/argocd
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostname: argocd-application-controller-0
    nodeName: ip-10-0-0-21.us-west-1.compute.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: argocd-application-controller
    serviceAccountName: argocd-application-controller
    subdomain: argocd-application-controller
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - emptyDir: {}
      name: argocd-home
    - name: argocd-repo-server-tls
      secret:
        defaultMode: 420
        items:
        - key: tls.crt
          path: tls.crt
        - key: tls.key
          path: tls.key
        - key: ca.crt
          path: ca.crt
        optional: true
        secretName: argocd-repo-server-tls
    - name: kube-api-access-x9lr4
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-10-07T18:49:41Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-10-07T18:49:31Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-10-07T18:50:02Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-10-07T18:50:02Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-10-07T18:49:31Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://193623f621b9197cc899f502bfa3959a94073671668cc3c22e90543693f5d378
      image: quay.io/argoproj/argocd:v2.12.3
      imageID: quay.io/argoproj/argocd@sha256:68894064bc381c19ea951029510aa614bd26bf46c2ec65ea445c7d8d095a9417
      lastState: {}
      name: argocd-application-controller
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-10-07T18:49:54Z"
    hostIP: 10.0.0.21
    hostIPs:
    - ip: 10.0.0.21
    phase: Running
    podIP: 10.0.0.209
    podIPs:
    - ip: 10.0.0.209
    qosClass: BestEffort
    startTime: "2024-10-07T18:49:31Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-10-07T18:49:31Z"
    generateName: argocd-applicationset-controller-744b76d7fd-
    labels:
      app.kubernetes.io/name: argocd-applicationset-controller
      pod-template-hash: 744b76d7fd
    name: argocd-applicationset-controller-744b76d7fd-58vqq
    namespace: argocd
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: argocd-applicationset-controller-744b76d7fd
      uid: e6359437-7638-47d8-9087-2c225286535f
    resourceVersion: "711999"
    uid: 6a5207ec-365c-4c70-ae42-a713fa10e97b
  spec:
    containers:
    - args:
      - /usr/local/bin/argocd-applicationset-controller
      env:
      - name: ARGOCD_APPLICATIONSET_CONTROLLER_GLOBAL_PRESERVED_ANNOTATIONS
        valueFrom:
          configMapKeyRef:
            key: applicationsetcontroller.global.preserved.annotations
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_APPLICATIONSET_CONTROLLER_GLOBAL_PRESERVED_LABELS
        valueFrom:
          configMapKeyRef:
            key: applicationsetcontroller.global.preserved.labels
            name: argocd-cmd-params-cm
            optional: true
      - name: NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_LEADER_ELECTION
        valueFrom:
          configMapKeyRef:
            key: applicationsetcontroller.enable.leader.election
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_APPLICATIONSET_CONTROLLER_REPO_SERVER
        valueFrom:
          configMapKeyRef:
            key: repo.server
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_APPLICATIONSET_CONTROLLER_POLICY
        valueFrom:
          configMapKeyRef:
            key: applicationsetcontroller.policy
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_POLICY_OVERRIDE
        valueFrom:
          configMapKeyRef:
            key: applicationsetcontroller.enable.policy.override
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_APPLICATIONSET_CONTROLLER_DEBUG
        valueFrom:
          configMapKeyRef:
            key: applicationsetcontroller.debug
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_APPLICATIONSET_CONTROLLER_LOGFORMAT
        valueFrom:
          configMapKeyRef:
            key: applicationsetcontroller.log.format
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_APPLICATIONSET_CONTROLLER_LOGLEVEL
        valueFrom:
          configMapKeyRef:
            key: applicationsetcontroller.log.level
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_APPLICATIONSET_CONTROLLER_DRY_RUN
        valueFrom:
          configMapKeyRef:
            key: applicationsetcontroller.dryrun
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_GIT_MODULES_ENABLED
        valueFrom:
          configMapKeyRef:
            key: applicationsetcontroller.enable.git.submodule
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_PROGRESSIVE_SYNCS
        valueFrom:
          configMapKeyRef:
            key: applicationsetcontroller.enable.progressive.syncs
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_NEW_GIT_FILE_GLOBBING
        valueFrom:
          configMapKeyRef:
            key: applicationsetcontroller.enable.new.git.file.globbing
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_APPLICATIONSET_CONTROLLER_REPO_SERVER_PLAINTEXT
        valueFrom:
          configMapKeyRef:
            key: applicationsetcontroller.repo.server.plaintext
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_APPLICATIONSET_CONTROLLER_REPO_SERVER_STRICT_TLS
        valueFrom:
          configMapKeyRef:
            key: applicationsetcontroller.repo.server.strict.tls
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_APPLICATIONSET_CONTROLLER_REPO_SERVER_TIMEOUT_SECONDS
        valueFrom:
          configMapKeyRef:
            key: applicationsetcontroller.repo.server.timeout.seconds
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_APPLICATIONSET_CONTROLLER_CONCURRENT_RECONCILIATIONS
        valueFrom:
          configMapKeyRef:
            key: applicationsetcontroller.concurrent.reconciliations.max
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_APPLICATIONSET_CONTROLLER_NAMESPACES
        valueFrom:
          configMapKeyRef:
            key: applicationsetcontroller.namespaces
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_APPLICATIONSET_CONTROLLER_SCM_ROOT_CA_PATH
        valueFrom:
          configMapKeyRef:
            key: applicationsetcontroller.scm.root.ca.path
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_APPLICATIONSET_CONTROLLER_ALLOWED_SCM_PROVIDERS
        valueFrom:
          configMapKeyRef:
            key: applicationsetcontroller.allowed.scm.providers
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_SCM_PROVIDERS
        valueFrom:
          configMapKeyRef:
            key: applicationsetcontroller.enable.scm.providers
            name: argocd-cmd-params-cm
            optional: true
      image: quay.io/argoproj/argocd:v2.12.3
      imagePullPolicy: Always
      name: argocd-applicationset-controller
      ports:
      - containerPort: 7000
        name: webhook
        protocol: TCP
      - containerPort: 8080
        name: metrics
        protocol: TCP
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /app/config/ssh
        name: ssh-known-hosts
      - mountPath: /app/config/tls
        name: tls-certs
      - mountPath: /app/config/gpg/source
        name: gpg-keys
      - mountPath: /app/config/gpg/keys
        name: gpg-keyring
      - mountPath: /tmp
        name: tmp
      - mountPath: /app/config/reposerver/tls
        name: argocd-repo-server-tls
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-hvq6b
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: ip-10-0-2-204.us-west-1.compute.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: argocd-applicationset-controller
    serviceAccountName: argocd-applicationset-controller
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - configMap:
        defaultMode: 420
        name: argocd-ssh-known-hosts-cm
      name: ssh-known-hosts
    - configMap:
        defaultMode: 420
        name: argocd-tls-certs-cm
      name: tls-certs
    - configMap:
        defaultMode: 420
        name: argocd-gpg-keys-cm
      name: gpg-keys
    - emptyDir: {}
      name: gpg-keyring
    - emptyDir: {}
      name: tmp
    - name: argocd-repo-server-tls
      secret:
        defaultMode: 420
        items:
        - key: tls.crt
          path: tls.crt
        - key: tls.key
          path: tls.key
        - key: ca.crt
          path: ca.crt
        optional: true
        secretName: argocd-repo-server-tls
    - name: kube-api-access-hvq6b
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-10-07T18:49:42Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-10-07T18:49:31Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-10-07T18:49:42Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-10-07T18:49:42Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-10-07T18:49:31Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://2865a872f8310fc2e586c2843aed2e1f7ae538a1a325d40e5591f6ab4cc02e8d
      image: quay.io/argoproj/argocd:v2.12.3
      imageID: quay.io/argoproj/argocd@sha256:68894064bc381c19ea951029510aa614bd26bf46c2ec65ea445c7d8d095a9417
      lastState: {}
      name: argocd-applicationset-controller
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-10-07T18:49:41Z"
    hostIP: 10.0.2.204
    hostIPs:
    - ip: 10.0.2.204
    phase: Running
    podIP: 10.0.2.231
    podIPs:
    - ip: 10.0.2.231
    qosClass: BestEffort
    startTime: "2024-10-07T18:49:31Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-10-07T18:49:31Z"
    generateName: argocd-dex-server-5bf5dbc64d-
    labels:
      app.kubernetes.io/name: argocd-dex-server
      pod-template-hash: 5bf5dbc64d
    name: argocd-dex-server-5bf5dbc64d-fw4jc
    namespace: argocd
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: argocd-dex-server-5bf5dbc64d
      uid: 44b52e11-01c4-43f3-9a92-078cfcec4be7
    resourceVersion: "712056"
    uid: f778523a-4dd8-4951-8e57-91b98e8ac433
  spec:
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchLabels:
                app.kubernetes.io/part-of: argocd
            topologyKey: kubernetes.io/hostname
          weight: 5
    containers:
    - command:
      - /shared/argocd-dex
      - rundex
      env:
      - name: ARGOCD_DEX_SERVER_DISABLE_TLS
        valueFrom:
          configMapKeyRef:
            key: dexserver.disable.tls
            name: argocd-cmd-params-cm
            optional: true
      image: ghcr.io/dexidp/dex:v2.38.0
      imagePullPolicy: Always
      name: dex
      ports:
      - containerPort: 5556
        protocol: TCP
      - containerPort: 5557
        protocol: TCP
      - containerPort: 5558
        protocol: TCP
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /shared
        name: static-files
      - mountPath: /tmp
        name: dexconfig
      - mountPath: /tls
        name: argocd-dex-server-tls
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-7fxdr
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    initContainers:
    - command:
      - /bin/cp
      - -n
      - /usr/local/bin/argocd
      - /shared/argocd-dex
      image: quay.io/argoproj/argocd:v2.12.3
      imagePullPolicy: Always
      name: copyutil
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /shared
        name: static-files
      - mountPath: /tmp
        name: dexconfig
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-7fxdr
        readOnly: true
    nodeName: ip-10-0-2-204.us-west-1.compute.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: argocd-dex-server
    serviceAccountName: argocd-dex-server
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - emptyDir: {}
      name: static-files
    - emptyDir: {}
      name: dexconfig
    - name: argocd-dex-server-tls
      secret:
        defaultMode: 420
        items:
        - key: tls.crt
          path: tls.crt
        - key: tls.key
          path: tls.key
        - key: ca.crt
          path: ca.crt
        optional: true
        secretName: argocd-dex-server-tls
    - name: kube-api-access-7fxdr
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-10-07T18:49:42Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-10-07T18:49:45Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-10-07T18:49:49Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-10-07T18:49:49Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-10-07T18:49:31Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://8f51537777d04464e57ccc69d1ff8184e68b1dbd443655a3bc2e97eff9ef4a27
      image: ghcr.io/dexidp/dex:v2.38.0
      imageID: ghcr.io/dexidp/dex@sha256:b1d793440a98d7ecde7fa5dbc8cee1204ef0e8918d9e51ef6201f50d12d55925
      lastState: {}
      name: dex
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-10-07T18:49:48Z"
    hostIP: 10.0.2.204
    hostIPs:
    - ip: 10.0.2.204
    initContainerStatuses:
    - containerID: containerd://26013e642d121ea2985bbe17143911ed5d9e87b04b44f8d5f127be0a459d7a3d
      image: quay.io/argoproj/argocd:v2.12.3
      imageID: quay.io/argoproj/argocd@sha256:68894064bc381c19ea951029510aa614bd26bf46c2ec65ea445c7d8d095a9417
      lastState: {}
      name: copyutil
      ready: true
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://26013e642d121ea2985bbe17143911ed5d9e87b04b44f8d5f127be0a459d7a3d
          exitCode: 0
          finishedAt: "2024-10-07T18:49:41Z"
          reason: Completed
          startedAt: "2024-10-07T18:49:41Z"
    phase: Running
    podIP: 10.0.2.147
    podIPs:
    - ip: 10.0.2.147
    qosClass: BestEffort
    startTime: "2024-10-07T18:49:31Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-10-07T18:49:31Z"
    generateName: argocd-notifications-controller-84f5bf6896-
    labels:
      app.kubernetes.io/name: argocd-notifications-controller
      pod-template-hash: 84f5bf6896
    name: argocd-notifications-controller-84f5bf6896-dzkv9
    namespace: argocd
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: argocd-notifications-controller-84f5bf6896
      uid: f5746bed-ec5c-48fb-8788-5f95c3e0eef1
    resourceVersion: "711988"
    uid: e7fd5446-4d5e-485f-bfac-d3061300aa07
  spec:
    containers:
    - args:
      - /usr/local/bin/argocd-notifications
      env:
      - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
        valueFrom:
          configMapKeyRef:
            key: notificationscontroller.log.format
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGLEVEL
        valueFrom:
          configMapKeyRef:
            key: notificationscontroller.log.level
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_APPLICATION_NAMESPACES
        valueFrom:
          configMapKeyRef:
            key: application.namespaces
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_NOTIFICATION_CONTROLLER_SELF_SERVICE_NOTIFICATION_ENABLED
        valueFrom:
          configMapKeyRef:
            key: notificationscontroller.selfservice.enabled
            name: argocd-cmd-params-cm
            optional: true
      image: quay.io/argoproj/argocd:v2.12.3
      imagePullPolicy: Always
      livenessProbe:
        failureThreshold: 3
        periodSeconds: 10
        successThreshold: 1
        tcpSocket:
          port: 9001
        timeoutSeconds: 1
      name: argocd-notifications-controller
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /app/config/tls
        name: tls-certs
      - mountPath: /app/config/reposerver/tls
        name: argocd-repo-server-tls
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-vgvh6
        readOnly: true
      workingDir: /app
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: ip-10-0-2-204.us-west-1.compute.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      runAsNonRoot: true
      seccompProfile:
        type: RuntimeDefault
    serviceAccount: argocd-notifications-controller
    serviceAccountName: argocd-notifications-controller
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - configMap:
        defaultMode: 420
        name: argocd-tls-certs-cm
      name: tls-certs
    - name: argocd-repo-server-tls
      secret:
        defaultMode: 420
        items:
        - key: tls.crt
          path: tls.crt
        - key: tls.key
          path: tls.key
        - key: ca.crt
          path: ca.crt
        optional: true
        secretName: argocd-repo-server-tls
    - name: kube-api-access-vgvh6
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-10-07T18:49:42Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-10-07T18:49:31Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-10-07T18:49:42Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-10-07T18:49:42Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-10-07T18:49:31Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://b7a6500e5c285795dd0837dd79413636b1fc6d5dfbd6416504b87e9ba1eb1bb5
      image: quay.io/argoproj/argocd:v2.12.3
      imageID: quay.io/argoproj/argocd@sha256:68894064bc381c19ea951029510aa614bd26bf46c2ec65ea445c7d8d095a9417
      lastState: {}
      name: argocd-notifications-controller
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-10-07T18:49:41Z"
    hostIP: 10.0.2.204
    hostIPs:
    - ip: 10.0.2.204
    phase: Running
    podIP: 10.0.2.198
    podIPs:
    - ip: 10.0.2.198
    qosClass: BestEffort
    startTime: "2024-10-07T18:49:31Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-10-07T18:49:31Z"
    generateName: argocd-redis-74b8999f94-
    labels:
      app.kubernetes.io/name: argocd-redis
      pod-template-hash: 74b8999f94
    name: argocd-redis-74b8999f94-ccscw
    namespace: argocd
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: argocd-redis-74b8999f94
      uid: 4932b227-b2d2-4978-8dc5-6b9e69413e1c
    resourceVersion: "712061"
    uid: 4fd0bb94-b7d4-4c87-834a-4971f11be13a
  spec:
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchLabels:
                app.kubernetes.io/name: argocd-redis
            topologyKey: kubernetes.io/hostname
          weight: 100
        - podAffinityTerm:
            labelSelector:
              matchLabels:
                app.kubernetes.io/part-of: argocd
            topologyKey: kubernetes.io/hostname
          weight: 5
    containers:
    - args:
      - --save
      - ""
      - --appendonly
      - "no"
      - --requirepass $(REDIS_PASSWORD)
      env:
      - name: REDIS_PASSWORD
        valueFrom:
          secretKeyRef:
            key: auth
            name: argocd-redis
      image: redis:7.0.15-alpine
      imagePullPolicy: Always
      name: redis
      ports:
      - containerPort: 6379
        protocol: TCP
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-qftbv
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    initContainers:
    - command:
      - argocd
      - admin
      - redis-initial-password
      image: quay.io/argoproj/argocd:v2.12.3
      imagePullPolicy: IfNotPresent
      name: secret-init
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-qftbv
        readOnly: true
    nodeName: ip-10-0-2-204.us-west-1.compute.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      runAsNonRoot: true
      runAsUser: 999
      seccompProfile:
        type: RuntimeDefault
    serviceAccount: argocd-redis
    serviceAccountName: argocd-redis
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-qftbv
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-10-07T18:49:42Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-10-07T18:49:45Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-10-07T18:49:49Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-10-07T18:49:49Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-10-07T18:49:31Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://84e09f5f5c4158c68953eafc5521401c668c9dc4cae8d496a47d78a7c3d9940e
      image: docker.io/library/redis:7.0.15-alpine
      imageID: docker.io/library/redis@sha256:c9d92d840fd011c908f040592857c724ae6d877f2aba5c40ad963276507386b2
      lastState: {}
      name: redis
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-10-07T18:49:48Z"
    hostIP: 10.0.2.204
    hostIPs:
    - ip: 10.0.2.204
    initContainerStatuses:
    - containerID: containerd://828132d87fa2a619b1a0635fd29d217604b2b90341146b14ffbf582c0e9975fc
      image: quay.io/argoproj/argocd:v2.12.3
      imageID: quay.io/argoproj/argocd@sha256:68894064bc381c19ea951029510aa614bd26bf46c2ec65ea445c7d8d095a9417
      lastState: {}
      name: secret-init
      ready: true
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://828132d87fa2a619b1a0635fd29d217604b2b90341146b14ffbf582c0e9975fc
          exitCode: 0
          finishedAt: "2024-10-07T18:49:41Z"
          reason: Completed
          startedAt: "2024-10-07T18:49:41Z"
    phase: Running
    podIP: 10.0.2.62
    podIPs:
    - ip: 10.0.2.62
    qosClass: BestEffort
    startTime: "2024-10-07T18:49:31Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-10-07T18:49:31Z"
    generateName: argocd-repo-server-57f4899557-
    labels:
      app.kubernetes.io/name: argocd-repo-server
      pod-template-hash: 57f4899557
    name: argocd-repo-server-57f4899557-mmlpq
    namespace: argocd
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: argocd-repo-server-57f4899557
      uid: 7bcd3f12-d8d0-41c7-8dae-07c6e864254a
    resourceVersion: "712078"
    uid: 005c1aee-acc4-4748-b521-e58b67deb0e1
  spec:
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchLabels:
                app.kubernetes.io/name: argocd-repo-server
            topologyKey: kubernetes.io/hostname
          weight: 100
        - podAffinityTerm:
            labelSelector:
              matchLabels:
                app.kubernetes.io/part-of: argocd
            topologyKey: kubernetes.io/hostname
          weight: 5
    automountServiceAccountToken: false
    containers:
    - args:
      - /usr/local/bin/argocd-repo-server
      env:
      - name: REDIS_PASSWORD
        valueFrom:
          secretKeyRef:
            key: auth
            name: argocd-redis
      - name: ARGOCD_RECONCILIATION_TIMEOUT
        valueFrom:
          configMapKeyRef:
            key: timeout.reconciliation
            name: argocd-cm
            optional: true
      - name: ARGOCD_REPO_SERVER_LOGFORMAT
        valueFrom:
          configMapKeyRef:
            key: reposerver.log.format
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_REPO_SERVER_LOGLEVEL
        valueFrom:
          configMapKeyRef:
            key: reposerver.log.level
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_REPO_SERVER_PARALLELISM_LIMIT
        valueFrom:
          configMapKeyRef:
            key: reposerver.parallelism.limit
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_REPO_SERVER_LISTEN_ADDRESS
        valueFrom:
          configMapKeyRef:
            key: reposerver.listen.address
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_REPO_SERVER_LISTEN_METRICS_ADDRESS
        valueFrom:
          configMapKeyRef:
            key: reposerver.metrics.listen.address
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_REPO_SERVER_DISABLE_TLS
        valueFrom:
          configMapKeyRef:
            key: reposerver.disable.tls
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_TLS_MIN_VERSION
        valueFrom:
          configMapKeyRef:
            key: reposerver.tls.minversion
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_TLS_MAX_VERSION
        valueFrom:
          configMapKeyRef:
            key: reposerver.tls.maxversion
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_TLS_CIPHERS
        valueFrom:
          configMapKeyRef:
            key: reposerver.tls.ciphers
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_REPO_CACHE_EXPIRATION
        valueFrom:
          configMapKeyRef:
            key: reposerver.repo.cache.expiration
            name: argocd-cmd-params-cm
            optional: true
      - name: REDIS_SERVER
        valueFrom:
          configMapKeyRef:
            key: redis.server
            name: argocd-cmd-params-cm
            optional: true
      - name: REDIS_COMPRESSION
        valueFrom:
          configMapKeyRef:
            key: redis.compression
            name: argocd-cmd-params-cm
            optional: true
      - name: REDISDB
        valueFrom:
          configMapKeyRef:
            key: redis.db
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_DEFAULT_CACHE_EXPIRATION
        valueFrom:
          configMapKeyRef:
            key: reposerver.default.cache.expiration
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_REPO_SERVER_OTLP_ADDRESS
        valueFrom:
          configMapKeyRef:
            key: otlp.address
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_REPO_SERVER_OTLP_INSECURE
        valueFrom:
          configMapKeyRef:
            key: otlp.insecure
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_REPO_SERVER_OTLP_HEADERS
        valueFrom:
          configMapKeyRef:
            key: otlp.headers
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_REPO_SERVER_MAX_COMBINED_DIRECTORY_MANIFESTS_SIZE
        valueFrom:
          configMapKeyRef:
            key: reposerver.max.combined.directory.manifests.size
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_REPO_SERVER_PLUGIN_TAR_EXCLUSIONS
        valueFrom:
          configMapKeyRef:
            key: reposerver.plugin.tar.exclusions
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_REPO_SERVER_ALLOW_OUT_OF_BOUNDS_SYMLINKS
        valueFrom:
          configMapKeyRef:
            key: reposerver.allow.oob.symlinks
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_REPO_SERVER_STREAMED_MANIFEST_MAX_TAR_SIZE
        valueFrom:
          configMapKeyRef:
            key: reposerver.streamed.manifest.max.tar.size
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_REPO_SERVER_STREAMED_MANIFEST_MAX_EXTRACTED_SIZE
        valueFrom:
          configMapKeyRef:
            key: reposerver.streamed.manifest.max.extracted.size
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_REPO_SERVER_HELM_MANIFEST_MAX_EXTRACTED_SIZE
        valueFrom:
          configMapKeyRef:
            key: reposerver.helm.manifest.max.extracted.size
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_REPO_SERVER_DISABLE_HELM_MANIFEST_MAX_EXTRACTED_SIZE
        valueFrom:
          configMapKeyRef:
            key: reposerver.disable.helm.manifest.max.extracted.size
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_REVISION_CACHE_LOCK_TIMEOUT
        valueFrom:
          configMapKeyRef:
            key: reposerver.revision.cache.lock.timeout
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_GIT_MODULES_ENABLED
        valueFrom:
          configMapKeyRef:
            key: reposerver.enable.git.submodule
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_GIT_LS_REMOTE_PARALLELISM_LIMIT
        valueFrom:
          configMapKeyRef:
            key: reposerver.git.lsremote.parallelism.limit
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_GIT_REQUEST_TIMEOUT
        valueFrom:
          configMapKeyRef:
            key: reposerver.git.request.timeout
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_GRPC_MAX_SIZE_MB
        valueFrom:
          configMapKeyRef:
            key: reposerver.grpc.max.size
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_REPO_SERVER_INCLUDE_HIDDEN_DIRECTORIES
        valueFrom:
          configMapKeyRef:
            key: reposerver.include.hidden.directories
            name: argocd-cmd-params-cm
            optional: true
      - name: HELM_CACHE_HOME
        value: /helm-working-dir
      - name: HELM_CONFIG_HOME
        value: /helm-working-dir
      - name: HELM_DATA_HOME
        value: /helm-working-dir
      image: quay.io/argoproj/argocd:v2.12.3
      imagePullPolicy: Always
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz?full=true
          port: 8084
          scheme: HTTP
        initialDelaySeconds: 30
        periodSeconds: 30
        successThreshold: 1
        timeoutSeconds: 5
      name: argocd-repo-server
      ports:
      - containerPort: 8081
        protocol: TCP
      - containerPort: 8084
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 8084
          scheme: HTTP
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /app/config/ssh
        name: ssh-known-hosts
      - mountPath: /app/config/tls
        name: tls-certs
      - mountPath: /app/config/gpg/source
        name: gpg-keys
      - mountPath: /app/config/gpg/keys
        name: gpg-keyring
      - mountPath: /app/config/reposerver/tls
        name: argocd-repo-server-tls
      - mountPath: /tmp
        name: tmp
      - mountPath: /helm-working-dir
        name: helm-working-dir
      - mountPath: /home/argocd/cmp-server/plugins
        name: plugins
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    initContainers:
    - command:
      - /bin/cp
      - -n
      - /usr/local/bin/argocd
      - /var/run/argocd/argocd-cmp-server
      image: quay.io/argoproj/argocd:v2.12.3
      imagePullPolicy: IfNotPresent
      name: copyutil
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/argocd
        name: var-files
    nodeName: ip-10-0-2-204.us-west-1.compute.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: argocd-repo-server
    serviceAccountName: argocd-repo-server
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - configMap:
        defaultMode: 420
        name: argocd-ssh-known-hosts-cm
      name: ssh-known-hosts
    - configMap:
        defaultMode: 420
        name: argocd-tls-certs-cm
      name: tls-certs
    - configMap:
        defaultMode: 420
        name: argocd-gpg-keys-cm
      name: gpg-keys
    - emptyDir: {}
      name: gpg-keyring
    - emptyDir: {}
      name: tmp
    - emptyDir: {}
      name: helm-working-dir
    - name: argocd-repo-server-tls
      secret:
        defaultMode: 420
        items:
        - key: tls.crt
          path: tls.crt
        - key: tls.key
          path: tls.key
        - key: ca.crt
          path: ca.crt
        optional: true
        secretName: argocd-repo-server-tls
    - emptyDir: {}
      name: var-files
    - emptyDir: {}
      name: plugins
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-10-07T18:49:42Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-10-07T18:49:45Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-10-07T18:49:51Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-10-07T18:49:51Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-10-07T18:49:31Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://282f7111f78a0659ecf53b7d1f4060746cc112610c687cbcf00c753bcfb2efd3
      image: quay.io/argoproj/argocd:v2.12.3
      imageID: quay.io/argoproj/argocd@sha256:68894064bc381c19ea951029510aa614bd26bf46c2ec65ea445c7d8d095a9417
      lastState: {}
      name: argocd-repo-server
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-10-07T18:49:45Z"
    hostIP: 10.0.2.204
    hostIPs:
    - ip: 10.0.2.204
    initContainerStatuses:
    - containerID: containerd://440baaccaf48e9b941324f62120e138cc455ad7a465bf547c3df332cbd1d1205
      image: quay.io/argoproj/argocd:v2.12.3
      imageID: quay.io/argoproj/argocd@sha256:68894064bc381c19ea951029510aa614bd26bf46c2ec65ea445c7d8d095a9417
      lastState: {}
      name: copyutil
      ready: true
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://440baaccaf48e9b941324f62120e138cc455ad7a465bf547c3df332cbd1d1205
          exitCode: 0
          finishedAt: "2024-10-07T18:49:41Z"
          reason: Completed
          startedAt: "2024-10-07T18:49:41Z"
    phase: Running
    podIP: 10.0.2.246
    podIPs:
    - ip: 10.0.2.246
    qosClass: BestEffort
    startTime: "2024-10-07T18:49:31Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-10-07T18:49:31Z"
    generateName: argocd-server-7bc7b97977-
    labels:
      app.kubernetes.io/name: argocd-server
      pod-template-hash: 7bc7b97977
    name: argocd-server-7bc7b97977-8mwfw
    namespace: argocd
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: argocd-server-7bc7b97977
      uid: 4ff642d9-8410-439b-aacc-8a5dab9b077b
    resourceVersion: "712118"
    uid: 38e239fa-579c-423a-9c76-50ee50370f1e
  spec:
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchLabels:
                app.kubernetes.io/name: argocd-server
            topologyKey: kubernetes.io/hostname
          weight: 100
        - podAffinityTerm:
            labelSelector:
              matchLabels:
                app.kubernetes.io/part-of: argocd
            topologyKey: kubernetes.io/hostname
          weight: 5
    containers:
    - args:
      - /usr/local/bin/argocd-server
      env:
      - name: REDIS_PASSWORD
        valueFrom:
          secretKeyRef:
            key: auth
            name: argocd-redis
      - name: ARGOCD_SERVER_INSECURE
        valueFrom:
          configMapKeyRef:
            key: server.insecure
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_SERVER_BASEHREF
        valueFrom:
          configMapKeyRef:
            key: server.basehref
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_SERVER_ROOTPATH
        valueFrom:
          configMapKeyRef:
            key: server.rootpath
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_SERVER_LOGFORMAT
        valueFrom:
          configMapKeyRef:
            key: server.log.format
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_SERVER_LOG_LEVEL
        valueFrom:
          configMapKeyRef:
            key: server.log.level
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_SERVER_REPO_SERVER
        valueFrom:
          configMapKeyRef:
            key: repo.server
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_SERVER_DEX_SERVER
        valueFrom:
          configMapKeyRef:
            key: server.dex.server
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_SERVER_DISABLE_AUTH
        valueFrom:
          configMapKeyRef:
            key: server.disable.auth
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_SERVER_ENABLE_GZIP
        valueFrom:
          configMapKeyRef:
            key: server.enable.gzip
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_SERVER_REPO_SERVER_TIMEOUT_SECONDS
        valueFrom:
          configMapKeyRef:
            key: server.repo.server.timeout.seconds
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_SERVER_X_FRAME_OPTIONS
        valueFrom:
          configMapKeyRef:
            key: server.x.frame.options
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_SERVER_CONTENT_SECURITY_POLICY
        valueFrom:
          configMapKeyRef:
            key: server.content.security.policy
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_SERVER_REPO_SERVER_PLAINTEXT
        valueFrom:
          configMapKeyRef:
            key: server.repo.server.plaintext
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_SERVER_REPO_SERVER_STRICT_TLS
        valueFrom:
          configMapKeyRef:
            key: server.repo.server.strict.tls
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_SERVER_DEX_SERVER_PLAINTEXT
        valueFrom:
          configMapKeyRef:
            key: server.dex.server.plaintext
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_SERVER_DEX_SERVER_STRICT_TLS
        valueFrom:
          configMapKeyRef:
            key: server.dex.server.strict.tls
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_TLS_MIN_VERSION
        valueFrom:
          configMapKeyRef:
            key: server.tls.minversion
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_TLS_MAX_VERSION
        valueFrom:
          configMapKeyRef:
            key: server.tls.maxversion
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_TLS_CIPHERS
        valueFrom:
          configMapKeyRef:
            key: server.tls.ciphers
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_SERVER_CONNECTION_STATUS_CACHE_EXPIRATION
        valueFrom:
          configMapKeyRef:
            key: server.connection.status.cache.expiration
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_SERVER_OIDC_CACHE_EXPIRATION
        valueFrom:
          configMapKeyRef:
            key: server.oidc.cache.expiration
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_SERVER_LOGIN_ATTEMPTS_EXPIRATION
        valueFrom:
          configMapKeyRef:
            key: server.login.attempts.expiration
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_SERVER_STATIC_ASSETS
        valueFrom:
          configMapKeyRef:
            key: server.staticassets
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_APP_STATE_CACHE_EXPIRATION
        valueFrom:
          configMapKeyRef:
            key: server.app.state.cache.expiration
            name: argocd-cmd-params-cm
            optional: true
      - name: REDIS_SERVER
        valueFrom:
          configMapKeyRef:
            key: redis.server
            name: argocd-cmd-params-cm
            optional: true
      - name: REDIS_COMPRESSION
        valueFrom:
          configMapKeyRef:
            key: redis.compression
            name: argocd-cmd-params-cm
            optional: true
      - name: REDISDB
        valueFrom:
          configMapKeyRef:
            key: redis.db
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_DEFAULT_CACHE_EXPIRATION
        valueFrom:
          configMapKeyRef:
            key: server.default.cache.expiration
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_MAX_COOKIE_NUMBER
        valueFrom:
          configMapKeyRef:
            key: server.http.cookie.maxnumber
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_SERVER_LISTEN_ADDRESS
        valueFrom:
          configMapKeyRef:
            key: server.listen.address
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_SERVER_METRICS_LISTEN_ADDRESS
        valueFrom:
          configMapKeyRef:
            key: server.metrics.listen.address
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_SERVER_OTLP_ADDRESS
        valueFrom:
          configMapKeyRef:
            key: otlp.address
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_SERVER_OTLP_INSECURE
        valueFrom:
          configMapKeyRef:
            key: otlp.insecure
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_SERVER_OTLP_HEADERS
        valueFrom:
          configMapKeyRef:
            key: otlp.headers
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_APPLICATION_NAMESPACES
        valueFrom:
          configMapKeyRef:
            key: application.namespaces
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_SERVER_ENABLE_PROXY_EXTENSION
        valueFrom:
          configMapKeyRef:
            key: server.enable.proxy.extension
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_K8SCLIENT_RETRY_MAX
        valueFrom:
          configMapKeyRef:
            key: server.k8sclient.retry.max
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_K8SCLIENT_RETRY_BASE_BACKOFF
        valueFrom:
          configMapKeyRef:
            key: server.k8sclient.retry.base.backoff
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_API_CONTENT_TYPES
        valueFrom:
          configMapKeyRef:
            key: server.api.content.types
            name: argocd-cmd-params-cm
            optional: true
      image: quay.io/argoproj/argocd:v2.12.3
      imagePullPolicy: Always
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz?full=true
          port: 8080
          scheme: HTTP
        initialDelaySeconds: 3
        periodSeconds: 30
        successThreshold: 1
        timeoutSeconds: 5
      name: argocd-server
      ports:
      - containerPort: 8080
        protocol: TCP
      - containerPort: 8083
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 8080
          scheme: HTTP
        initialDelaySeconds: 3
        periodSeconds: 30
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /app/config/ssh
        name: ssh-known-hosts
      - mountPath: /app/config/tls
        name: tls-certs
      - mountPath: /app/config/server/tls
        name: argocd-repo-server-tls
      - mountPath: /app/config/dex/tls
        name: argocd-dex-server-tls
      - mountPath: /home/argocd
        name: plugins-home
      - mountPath: /tmp
        name: tmp
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-g9fr9
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: ip-10-0-2-204.us-west-1.compute.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: argocd-server
    serviceAccountName: argocd-server
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - emptyDir: {}
      name: plugins-home
    - emptyDir: {}
      name: tmp
    - configMap:
        defaultMode: 420
        name: argocd-ssh-known-hosts-cm
      name: ssh-known-hosts
    - configMap:
        defaultMode: 420
        name: argocd-tls-certs-cm
      name: tls-certs
    - name: argocd-repo-server-tls
      secret:
        defaultMode: 420
        items:
        - key: tls.crt
          path: tls.crt
        - key: tls.key
          path: tls.key
        - key: ca.crt
          path: ca.crt
        optional: true
        secretName: argocd-repo-server-tls
    - name: argocd-dex-server-tls
      secret:
        defaultMode: 420
        items:
        - key: tls.crt
          path: tls.crt
        - key: ca.crt
          path: ca.crt
        optional: true
        secretName: argocd-dex-server-tls
    - name: kube-api-access-g9fr9
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-10-07T18:49:41Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-10-07T18:49:31Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-10-07T18:50:02Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-10-07T18:50:02Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-10-07T18:49:31Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://0c92ff09dd09bf40c6e538ec109a98460cbd948417c052dfb0aed75ac20fa2cf
      image: quay.io/argoproj/argocd:v2.12.3
      imageID: quay.io/argoproj/argocd@sha256:68894064bc381c19ea951029510aa614bd26bf46c2ec65ea445c7d8d095a9417
      lastState: {}
      name: argocd-server
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-10-07T18:49:42Z"
    hostIP: 10.0.2.204
    hostIPs:
    - ip: 10.0.2.204
    phase: Running
    podIP: 10.0.2.124
    podIPs:
    - ip: 10.0.2.124
    qosClass: BestEffort
    startTime: "2024-10-07T18:49:31Z"
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"app.kubernetes.io/component":"applicationset-controller","app.kubernetes.io/name":"argocd-applicationset-controller","app.kubernetes.io/part-of":"argocd"},"name":"argocd-applicationset-controller","namespace":"argocd"},"spec":{"ports":[{"name":"webhook","port":7000,"protocol":"TCP","targetPort":"webhook"},{"name":"metrics","port":8080,"protocol":"TCP","targetPort":"metrics"}],"selector":{"app.kubernetes.io/name":"argocd-applicationset-controller"}}}
    creationTimestamp: "2024-10-07T18:49:30Z"
    labels:
      app.kubernetes.io/component: applicationset-controller
      app.kubernetes.io/name: argocd-applicationset-controller
      app.kubernetes.io/part-of: argocd
    name: argocd-applicationset-controller
    namespace: argocd
    resourceVersion: "711790"
    uid: 69fa989c-1a0d-4ac4-b1f2-d33f1ab3b125
  spec:
    clusterIP: 172.20.74.72
    clusterIPs:
    - 172.20.74.72
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: webhook
      port: 7000
      protocol: TCP
      targetPort: webhook
    - name: metrics
      port: 8080
      protocol: TCP
      targetPort: metrics
    selector:
      app.kubernetes.io/name: argocd-applicationset-controller
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"app.kubernetes.io/component":"dex-server","app.kubernetes.io/name":"argocd-dex-server","app.kubernetes.io/part-of":"argocd"},"name":"argocd-dex-server","namespace":"argocd"},"spec":{"ports":[{"appProtocol":"TCP","name":"http","port":5556,"protocol":"TCP","targetPort":5556},{"name":"grpc","port":5557,"protocol":"TCP","targetPort":5557},{"name":"metrics","port":5558,"protocol":"TCP","targetPort":5558}],"selector":{"app.kubernetes.io/name":"argocd-dex-server"}}}
    creationTimestamp: "2024-10-07T18:49:30Z"
    labels:
      app.kubernetes.io/component: dex-server
      app.kubernetes.io/name: argocd-dex-server
      app.kubernetes.io/part-of: argocd
    name: argocd-dex-server
    namespace: argocd
    resourceVersion: "711795"
    uid: 0c624400-e7a7-458f-9fae-8b19fa2bc8f6
  spec:
    clusterIP: 172.20.149.32
    clusterIPs:
    - 172.20.149.32
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - appProtocol: TCP
      name: http
      port: 5556
      protocol: TCP
      targetPort: 5556
    - name: grpc
      port: 5557
      protocol: TCP
      targetPort: 5557
    - name: metrics
      port: 5558
      protocol: TCP
      targetPort: 5558
    selector:
      app.kubernetes.io/name: argocd-dex-server
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"app.kubernetes.io/component":"metrics","app.kubernetes.io/name":"argocd-metrics","app.kubernetes.io/part-of":"argocd"},"name":"argocd-metrics","namespace":"argocd"},"spec":{"ports":[{"name":"metrics","port":8082,"protocol":"TCP","targetPort":8082}],"selector":{"app.kubernetes.io/name":"argocd-application-controller"}}}
    creationTimestamp: "2024-10-07T18:49:30Z"
    labels:
      app.kubernetes.io/component: metrics
      app.kubernetes.io/name: argocd-metrics
      app.kubernetes.io/part-of: argocd
    name: argocd-metrics
    namespace: argocd
    resourceVersion: "711799"
    uid: 4db5630d-1995-4b75-9e2e-5e0dec2518b6
  spec:
    clusterIP: 172.20.47.4
    clusterIPs:
    - 172.20.47.4
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: metrics
      port: 8082
      protocol: TCP
      targetPort: 8082
    selector:
      app.kubernetes.io/name: argocd-application-controller
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"app.kubernetes.io/component":"notifications-controller","app.kubernetes.io/name":"argocd-notifications-controller-metrics","app.kubernetes.io/part-of":"argocd"},"name":"argocd-notifications-controller-metrics","namespace":"argocd"},"spec":{"ports":[{"name":"metrics","port":9001,"protocol":"TCP","targetPort":9001}],"selector":{"app.kubernetes.io/name":"argocd-notifications-controller"}}}
    creationTimestamp: "2024-10-07T18:49:30Z"
    labels:
      app.kubernetes.io/component: notifications-controller
      app.kubernetes.io/name: argocd-notifications-controller-metrics
      app.kubernetes.io/part-of: argocd
    name: argocd-notifications-controller-metrics
    namespace: argocd
    resourceVersion: "711803"
    uid: ad140ac7-a0be-42a4-b027-d9fe54a572b9
  spec:
    clusterIP: 172.20.162.94
    clusterIPs:
    - 172.20.162.94
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: metrics
      port: 9001
      protocol: TCP
      targetPort: 9001
    selector:
      app.kubernetes.io/name: argocd-notifications-controller
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"app.kubernetes.io/component":"redis","app.kubernetes.io/name":"argocd-redis","app.kubernetes.io/part-of":"argocd"},"name":"argocd-redis","namespace":"argocd"},"spec":{"ports":[{"name":"tcp-redis","port":6379,"targetPort":6379}],"selector":{"app.kubernetes.io/name":"argocd-redis"}}}
    creationTimestamp: "2024-10-07T18:49:30Z"
    labels:
      app.kubernetes.io/component: redis
      app.kubernetes.io/name: argocd-redis
      app.kubernetes.io/part-of: argocd
    name: argocd-redis
    namespace: argocd
    resourceVersion: "711807"
    uid: c2c95f1d-2304-4f06-8cd9-3cd65f5d754a
  spec:
    clusterIP: 172.20.249.217
    clusterIPs:
    - 172.20.249.217
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: tcp-redis
      port: 6379
      protocol: TCP
      targetPort: 6379
    selector:
      app.kubernetes.io/name: argocd-redis
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"app.kubernetes.io/component":"repo-server","app.kubernetes.io/name":"argocd-repo-server","app.kubernetes.io/part-of":"argocd"},"name":"argocd-repo-server","namespace":"argocd"},"spec":{"ports":[{"name":"server","port":8081,"protocol":"TCP","targetPort":8081},{"name":"metrics","port":8084,"protocol":"TCP","targetPort":8084}],"selector":{"app.kubernetes.io/name":"argocd-repo-server"}}}
    creationTimestamp: "2024-10-07T18:49:31Z"
    labels:
      app.kubernetes.io/component: repo-server
      app.kubernetes.io/name: argocd-repo-server
      app.kubernetes.io/part-of: argocd
    name: argocd-repo-server
    namespace: argocd
    resourceVersion: "711811"
    uid: 05a60db3-c2ab-4535-bec1-c990a115fa1f
  spec:
    clusterIP: 172.20.58.192
    clusterIPs:
    - 172.20.58.192
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: server
      port: 8081
      protocol: TCP
      targetPort: 8081
    - name: metrics
      port: 8084
      protocol: TCP
      targetPort: 8084
    selector:
      app.kubernetes.io/name: argocd-repo-server
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"app.kubernetes.io/component":"server","app.kubernetes.io/name":"argocd-server","app.kubernetes.io/part-of":"argocd"},"name":"argocd-server","namespace":"argocd"},"spec":{"ports":[{"name":"http","port":80,"protocol":"TCP","targetPort":8080},{"name":"https","port":443,"protocol":"TCP","targetPort":8080}],"selector":{"app.kubernetes.io/name":"argocd-server"}}}
    creationTimestamp: "2024-10-07T18:49:31Z"
    finalizers:
    - service.kubernetes.io/load-balancer-cleanup
    labels:
      app.kubernetes.io/component: server
      app.kubernetes.io/name: argocd-server
      app.kubernetes.io/part-of: argocd
    name: argocd-server
    namespace: argocd
    resourceVersion: "712073"
    uid: bca1bdee-b40a-4197-9e1f-8fd7013398f5
  spec:
    allocateLoadBalancerNodePorts: true
    clusterIP: 172.20.198.41
    clusterIPs:
    - 172.20.198.41
    externalTrafficPolicy: Cluster
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: http
      nodePort: 31068
      port: 80
      protocol: TCP
      targetPort: 8080
    - name: https
      nodePort: 32445
      port: 443
      protocol: TCP
      targetPort: 8080
    selector:
      app.kubernetes.io/name: argocd-server
    sessionAffinity: None
    type: LoadBalancer
  status:
    loadBalancer:
      ingress:
      - hostname: abca1bdeeb40a41979e1f8fd7013398f-1525001411.us-west-1.elb.amazonaws.com
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"app.kubernetes.io/component":"server","app.kubernetes.io/name":"argocd-server-metrics","app.kubernetes.io/part-of":"argocd"},"name":"argocd-server-metrics","namespace":"argocd"},"spec":{"ports":[{"name":"metrics","port":8083,"protocol":"TCP","targetPort":8083}],"selector":{"app.kubernetes.io/name":"argocd-server"}}}
    creationTimestamp: "2024-10-07T18:49:31Z"
    labels:
      app.kubernetes.io/component: server
      app.kubernetes.io/name: argocd-server-metrics
      app.kubernetes.io/part-of: argocd
    name: argocd-server-metrics
    namespace: argocd
    resourceVersion: "711820"
    uid: 9fd32c13-4829-4f49-9948-8094594a09fe
  spec:
    clusterIP: 172.20.95.196
    clusterIPs:
    - 172.20.95.196
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: metrics
      port: 8083
      protocol: TCP
      targetPort: 8083
    selector:
      app.kubernetes.io/name: argocd-server
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app.kubernetes.io/component":"applicationset-controller","app.kubernetes.io/name":"argocd-applicationset-controller","app.kubernetes.io/part-of":"argocd"},"name":"argocd-applicationset-controller","namespace":"argocd"},"spec":{"selector":{"matchLabels":{"app.kubernetes.io/name":"argocd-applicationset-controller"}},"template":{"metadata":{"labels":{"app.kubernetes.io/name":"argocd-applicationset-controller"}},"spec":{"containers":[{"args":["/usr/local/bin/argocd-applicationset-controller"],"env":[{"name":"ARGOCD_APPLICATIONSET_CONTROLLER_GLOBAL_PRESERVED_ANNOTATIONS","valueFrom":{"configMapKeyRef":{"key":"applicationsetcontroller.global.preserved.annotations","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_APPLICATIONSET_CONTROLLER_GLOBAL_PRESERVED_LABELS","valueFrom":{"configMapKeyRef":{"key":"applicationsetcontroller.global.preserved.labels","name":"argocd-cmd-params-cm","optional":true}}},{"name":"NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}},{"name":"ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_LEADER_ELECTION","valueFrom":{"configMapKeyRef":{"key":"applicationsetcontroller.enable.leader.election","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_APPLICATIONSET_CONTROLLER_REPO_SERVER","valueFrom":{"configMapKeyRef":{"key":"repo.server","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_APPLICATIONSET_CONTROLLER_POLICY","valueFrom":{"configMapKeyRef":{"key":"applicationsetcontroller.policy","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_POLICY_OVERRIDE","valueFrom":{"configMapKeyRef":{"key":"applicationsetcontroller.enable.policy.override","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_APPLICATIONSET_CONTROLLER_DEBUG","valueFrom":{"configMapKeyRef":{"key":"applicationsetcontroller.debug","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_APPLICATIONSET_CONTROLLER_LOGFORMAT","valueFrom":{"configMapKeyRef":{"key":"applicationsetcontroller.log.format","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_APPLICATIONSET_CONTROLLER_LOGLEVEL","valueFrom":{"configMapKeyRef":{"key":"applicationsetcontroller.log.level","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_APPLICATIONSET_CONTROLLER_DRY_RUN","valueFrom":{"configMapKeyRef":{"key":"applicationsetcontroller.dryrun","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_GIT_MODULES_ENABLED","valueFrom":{"configMapKeyRef":{"key":"applicationsetcontroller.enable.git.submodule","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_PROGRESSIVE_SYNCS","valueFrom":{"configMapKeyRef":{"key":"applicationsetcontroller.enable.progressive.syncs","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_NEW_GIT_FILE_GLOBBING","valueFrom":{"configMapKeyRef":{"key":"applicationsetcontroller.enable.new.git.file.globbing","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_APPLICATIONSET_CONTROLLER_REPO_SERVER_PLAINTEXT","valueFrom":{"configMapKeyRef":{"key":"applicationsetcontroller.repo.server.plaintext","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_APPLICATIONSET_CONTROLLER_REPO_SERVER_STRICT_TLS","valueFrom":{"configMapKeyRef":{"key":"applicationsetcontroller.repo.server.strict.tls","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_APPLICATIONSET_CONTROLLER_REPO_SERVER_TIMEOUT_SECONDS","valueFrom":{"configMapKeyRef":{"key":"applicationsetcontroller.repo.server.timeout.seconds","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_APPLICATIONSET_CONTROLLER_CONCURRENT_RECONCILIATIONS","valueFrom":{"configMapKeyRef":{"key":"applicationsetcontroller.concurrent.reconciliations.max","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_APPLICATIONSET_CONTROLLER_NAMESPACES","valueFrom":{"configMapKeyRef":{"key":"applicationsetcontroller.namespaces","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_APPLICATIONSET_CONTROLLER_SCM_ROOT_CA_PATH","valueFrom":{"configMapKeyRef":{"key":"applicationsetcontroller.scm.root.ca.path","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_APPLICATIONSET_CONTROLLER_ALLOWED_SCM_PROVIDERS","valueFrom":{"configMapKeyRef":{"key":"applicationsetcontroller.allowed.scm.providers","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_SCM_PROVIDERS","valueFrom":{"configMapKeyRef":{"key":"applicationsetcontroller.enable.scm.providers","name":"argocd-cmd-params-cm","optional":true}}}],"image":"quay.io/argoproj/argocd:v2.12.3","imagePullPolicy":"Always","name":"argocd-applicationset-controller","ports":[{"containerPort":7000,"name":"webhook"},{"containerPort":8080,"name":"metrics"}],"securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"drop":["ALL"]},"readOnlyRootFilesystem":true,"runAsNonRoot":true,"seccompProfile":{"type":"RuntimeDefault"}},"volumeMounts":[{"mountPath":"/app/config/ssh","name":"ssh-known-hosts"},{"mountPath":"/app/config/tls","name":"tls-certs"},{"mountPath":"/app/config/gpg/source","name":"gpg-keys"},{"mountPath":"/app/config/gpg/keys","name":"gpg-keyring"},{"mountPath":"/tmp","name":"tmp"},{"mountPath":"/app/config/reposerver/tls","name":"argocd-repo-server-tls"}]}],"serviceAccountName":"argocd-applicationset-controller","volumes":[{"configMap":{"name":"argocd-ssh-known-hosts-cm"},"name":"ssh-known-hosts"},{"configMap":{"name":"argocd-tls-certs-cm"},"name":"tls-certs"},{"configMap":{"name":"argocd-gpg-keys-cm"},"name":"gpg-keys"},{"emptyDir":{},"name":"gpg-keyring"},{"emptyDir":{},"name":"tmp"},{"name":"argocd-repo-server-tls","secret":{"items":[{"key":"tls.crt","path":"tls.crt"},{"key":"tls.key","path":"tls.key"},{"key":"ca.crt","path":"ca.crt"}],"optional":true,"secretName":"argocd-repo-server-tls"}}]}}}}
    creationTimestamp: "2024-10-07T18:49:31Z"
    generation: 1
    labels:
      app.kubernetes.io/component: applicationset-controller
      app.kubernetes.io/name: argocd-applicationset-controller
      app.kubernetes.io/part-of: argocd
    name: argocd-applicationset-controller
    namespace: argocd
    resourceVersion: "712005"
    uid: e181457a-8b3b-48ee-8781-923d8164aacc
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/name: argocd-applicationset-controller
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/name: argocd-applicationset-controller
      spec:
        containers:
        - args:
          - /usr/local/bin/argocd-applicationset-controller
          env:
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_GLOBAL_PRESERVED_ANNOTATIONS
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.global.preserved.annotations
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_GLOBAL_PRESERVED_LABELS
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.global.preserved.labels
                name: argocd-cmd-params-cm
                optional: true
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_LEADER_ELECTION
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.enable.leader.election
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_REPO_SERVER
            valueFrom:
              configMapKeyRef:
                key: repo.server
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_POLICY
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.policy
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_POLICY_OVERRIDE
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.enable.policy.override
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_DEBUG
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.debug
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_LOGFORMAT
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.log.format
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_LOGLEVEL
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.log.level
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_DRY_RUN
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.dryrun
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_GIT_MODULES_ENABLED
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.enable.git.submodule
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_PROGRESSIVE_SYNCS
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.enable.progressive.syncs
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_NEW_GIT_FILE_GLOBBING
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.enable.new.git.file.globbing
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_REPO_SERVER_PLAINTEXT
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.repo.server.plaintext
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_REPO_SERVER_STRICT_TLS
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.repo.server.strict.tls
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_REPO_SERVER_TIMEOUT_SECONDS
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.repo.server.timeout.seconds
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_CONCURRENT_RECONCILIATIONS
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.concurrent.reconciliations.max
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_NAMESPACES
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.namespaces
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_SCM_ROOT_CA_PATH
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.scm.root.ca.path
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_ALLOWED_SCM_PROVIDERS
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.allowed.scm.providers
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_SCM_PROVIDERS
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.enable.scm.providers
                name: argocd-cmd-params-cm
                optional: true
          image: quay.io/argoproj/argocd:v2.12.3
          imagePullPolicy: Always
          name: argocd-applicationset-controller
          ports:
          - containerPort: 7000
            name: webhook
            protocol: TCP
          - containerPort: 8080
            name: metrics
            protocol: TCP
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /app/config/ssh
            name: ssh-known-hosts
          - mountPath: /app/config/tls
            name: tls-certs
          - mountPath: /app/config/gpg/source
            name: gpg-keys
          - mountPath: /app/config/gpg/keys
            name: gpg-keyring
          - mountPath: /tmp
            name: tmp
          - mountPath: /app/config/reposerver/tls
            name: argocd-repo-server-tls
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: argocd-applicationset-controller
        serviceAccountName: argocd-applicationset-controller
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            name: argocd-ssh-known-hosts-cm
          name: ssh-known-hosts
        - configMap:
            defaultMode: 420
            name: argocd-tls-certs-cm
          name: tls-certs
        - configMap:
            defaultMode: 420
            name: argocd-gpg-keys-cm
          name: gpg-keys
        - emptyDir: {}
          name: gpg-keyring
        - emptyDir: {}
          name: tmp
        - name: argocd-repo-server-tls
          secret:
            defaultMode: 420
            items:
            - key: tls.crt
              path: tls.crt
            - key: tls.key
              path: tls.key
            - key: ca.crt
              path: ca.crt
            optional: true
            secretName: argocd-repo-server-tls
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-10-07T18:49:42Z"
      lastUpdateTime: "2024-10-07T18:49:42Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2024-10-07T18:49:31Z"
      lastUpdateTime: "2024-10-07T18:49:42Z"
      message: ReplicaSet "argocd-applicationset-controller-744b76d7fd" has successfully
        progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app.kubernetes.io/component":"dex-server","app.kubernetes.io/name":"argocd-dex-server","app.kubernetes.io/part-of":"argocd"},"name":"argocd-dex-server","namespace":"argocd"},"spec":{"selector":{"matchLabels":{"app.kubernetes.io/name":"argocd-dex-server"}},"template":{"metadata":{"labels":{"app.kubernetes.io/name":"argocd-dex-server"}},"spec":{"affinity":{"podAntiAffinity":{"preferredDuringSchedulingIgnoredDuringExecution":[{"podAffinityTerm":{"labelSelector":{"matchLabels":{"app.kubernetes.io/part-of":"argocd"}},"topologyKey":"kubernetes.io/hostname"},"weight":5}]}},"containers":[{"command":["/shared/argocd-dex","rundex"],"env":[{"name":"ARGOCD_DEX_SERVER_DISABLE_TLS","valueFrom":{"configMapKeyRef":{"key":"dexserver.disable.tls","name":"argocd-cmd-params-cm","optional":true}}}],"image":"ghcr.io/dexidp/dex:v2.38.0","imagePullPolicy":"Always","name":"dex","ports":[{"containerPort":5556},{"containerPort":5557},{"containerPort":5558}],"securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"drop":["ALL"]},"readOnlyRootFilesystem":true,"runAsNonRoot":true,"seccompProfile":{"type":"RuntimeDefault"}},"volumeMounts":[{"mountPath":"/shared","name":"static-files"},{"mountPath":"/tmp","name":"dexconfig"},{"mountPath":"/tls","name":"argocd-dex-server-tls"}]}],"initContainers":[{"command":["/bin/cp","-n","/usr/local/bin/argocd","/shared/argocd-dex"],"image":"quay.io/argoproj/argocd:v2.12.3","imagePullPolicy":"Always","name":"copyutil","securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"drop":["ALL"]},"readOnlyRootFilesystem":true,"runAsNonRoot":true,"seccompProfile":{"type":"RuntimeDefault"}},"volumeMounts":[{"mountPath":"/shared","name":"static-files"},{"mountPath":"/tmp","name":"dexconfig"}]}],"serviceAccountName":"argocd-dex-server","volumes":[{"emptyDir":{},"name":"static-files"},{"emptyDir":{},"name":"dexconfig"},{"name":"argocd-dex-server-tls","secret":{"items":[{"key":"tls.crt","path":"tls.crt"},{"key":"tls.key","path":"tls.key"},{"key":"ca.crt","path":"ca.crt"}],"optional":true,"secretName":"argocd-dex-server-tls"}}]}}}}
    creationTimestamp: "2024-10-07T18:49:31Z"
    generation: 1
    labels:
      app.kubernetes.io/component: dex-server
      app.kubernetes.io/name: argocd-dex-server
      app.kubernetes.io/part-of: argocd
    name: argocd-dex-server
    namespace: argocd
    resourceVersion: "712060"
    uid: 15b06087-a05c-40cb-bb14-310d748d23cb
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/name: argocd-dex-server
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/name: argocd-dex-server
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/part-of: argocd
                topologyKey: kubernetes.io/hostname
              weight: 5
        containers:
        - command:
          - /shared/argocd-dex
          - rundex
          env:
          - name: ARGOCD_DEX_SERVER_DISABLE_TLS
            valueFrom:
              configMapKeyRef:
                key: dexserver.disable.tls
                name: argocd-cmd-params-cm
                optional: true
          image: ghcr.io/dexidp/dex:v2.38.0
          imagePullPolicy: Always
          name: dex
          ports:
          - containerPort: 5556
            protocol: TCP
          - containerPort: 5557
            protocol: TCP
          - containerPort: 5558
            protocol: TCP
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /shared
            name: static-files
          - mountPath: /tmp
            name: dexconfig
          - mountPath: /tls
            name: argocd-dex-server-tls
        dnsPolicy: ClusterFirst
        initContainers:
        - command:
          - /bin/cp
          - -n
          - /usr/local/bin/argocd
          - /shared/argocd-dex
          image: quay.io/argoproj/argocd:v2.12.3
          imagePullPolicy: Always
          name: copyutil
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /shared
            name: static-files
          - mountPath: /tmp
            name: dexconfig
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: argocd-dex-server
        serviceAccountName: argocd-dex-server
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: static-files
        - emptyDir: {}
          name: dexconfig
        - name: argocd-dex-server-tls
          secret:
            defaultMode: 420
            items:
            - key: tls.crt
              path: tls.crt
            - key: tls.key
              path: tls.key
            - key: ca.crt
              path: ca.crt
            optional: true
            secretName: argocd-dex-server-tls
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-10-07T18:49:49Z"
      lastUpdateTime: "2024-10-07T18:49:49Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2024-10-07T18:49:31Z"
      lastUpdateTime: "2024-10-07T18:49:49Z"
      message: ReplicaSet "argocd-dex-server-5bf5dbc64d" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app.kubernetes.io/component":"notifications-controller","app.kubernetes.io/name":"argocd-notifications-controller","app.kubernetes.io/part-of":"argocd"},"name":"argocd-notifications-controller","namespace":"argocd"},"spec":{"selector":{"matchLabels":{"app.kubernetes.io/name":"argocd-notifications-controller"}},"strategy":{"type":"Recreate"},"template":{"metadata":{"labels":{"app.kubernetes.io/name":"argocd-notifications-controller"}},"spec":{"containers":[{"args":["/usr/local/bin/argocd-notifications"],"env":[{"name":"ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT","valueFrom":{"configMapKeyRef":{"key":"notificationscontroller.log.format","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_NOTIFICATIONS_CONTROLLER_LOGLEVEL","valueFrom":{"configMapKeyRef":{"key":"notificationscontroller.log.level","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_APPLICATION_NAMESPACES","valueFrom":{"configMapKeyRef":{"key":"application.namespaces","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_NOTIFICATION_CONTROLLER_SELF_SERVICE_NOTIFICATION_ENABLED","valueFrom":{"configMapKeyRef":{"key":"notificationscontroller.selfservice.enabled","name":"argocd-cmd-params-cm","optional":true}}}],"image":"quay.io/argoproj/argocd:v2.12.3","imagePullPolicy":"Always","livenessProbe":{"tcpSocket":{"port":9001}},"name":"argocd-notifications-controller","securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"drop":["ALL"]},"readOnlyRootFilesystem":true},"volumeMounts":[{"mountPath":"/app/config/tls","name":"tls-certs"},{"mountPath":"/app/config/reposerver/tls","name":"argocd-repo-server-tls"}],"workingDir":"/app"}],"securityContext":{"runAsNonRoot":true,"seccompProfile":{"type":"RuntimeDefault"}},"serviceAccountName":"argocd-notifications-controller","volumes":[{"configMap":{"name":"argocd-tls-certs-cm"},"name":"tls-certs"},{"name":"argocd-repo-server-tls","secret":{"items":[{"key":"tls.crt","path":"tls.crt"},{"key":"tls.key","path":"tls.key"},{"key":"ca.crt","path":"ca.crt"}],"optional":true,"secretName":"argocd-repo-server-tls"}}]}}}}
    creationTimestamp: "2024-10-07T18:49:31Z"
    generation: 1
    labels:
      app.kubernetes.io/component: notifications-controller
      app.kubernetes.io/name: argocd-notifications-controller
      app.kubernetes.io/part-of: argocd
    name: argocd-notifications-controller
    namespace: argocd
    resourceVersion: "711993"
    uid: 7d582895-4882-4099-8e70-699b49215580
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/name: argocd-notifications-controller
    strategy:
      type: Recreate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/name: argocd-notifications-controller
      spec:
        containers:
        - args:
          - /usr/local/bin/argocd-notifications
          env:
          - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
            valueFrom:
              configMapKeyRef:
                key: notificationscontroller.log.format
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGLEVEL
            valueFrom:
              configMapKeyRef:
                key: notificationscontroller.log.level
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATION_NAMESPACES
            valueFrom:
              configMapKeyRef:
                key: application.namespaces
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_NOTIFICATION_CONTROLLER_SELF_SERVICE_NOTIFICATION_ENABLED
            valueFrom:
              configMapKeyRef:
                key: notificationscontroller.selfservice.enabled
                name: argocd-cmd-params-cm
                optional: true
          image: quay.io/argoproj/argocd:v2.12.3
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 3
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 9001
            timeoutSeconds: 1
          name: argocd-notifications-controller
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /app/config/tls
            name: tls-certs
          - mountPath: /app/config/reposerver/tls
            name: argocd-repo-server-tls
          workingDir: /app
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: argocd-notifications-controller
        serviceAccountName: argocd-notifications-controller
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            name: argocd-tls-certs-cm
          name: tls-certs
        - name: argocd-repo-server-tls
          secret:
            defaultMode: 420
            items:
            - key: tls.crt
              path: tls.crt
            - key: tls.key
              path: tls.key
            - key: ca.crt
              path: ca.crt
            optional: true
            secretName: argocd-repo-server-tls
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-10-07T18:49:42Z"
      lastUpdateTime: "2024-10-07T18:49:42Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2024-10-07T18:49:31Z"
      lastUpdateTime: "2024-10-07T18:49:42Z"
      message: ReplicaSet "argocd-notifications-controller-84f5bf6896" has successfully
        progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app.kubernetes.io/component":"redis","app.kubernetes.io/name":"argocd-redis","app.kubernetes.io/part-of":"argocd"},"name":"argocd-redis","namespace":"argocd"},"spec":{"selector":{"matchLabels":{"app.kubernetes.io/name":"argocd-redis"}},"template":{"metadata":{"labels":{"app.kubernetes.io/name":"argocd-redis"}},"spec":{"affinity":{"podAntiAffinity":{"preferredDuringSchedulingIgnoredDuringExecution":[{"podAffinityTerm":{"labelSelector":{"matchLabels":{"app.kubernetes.io/name":"argocd-redis"}},"topologyKey":"kubernetes.io/hostname"},"weight":100},{"podAffinityTerm":{"labelSelector":{"matchLabels":{"app.kubernetes.io/part-of":"argocd"}},"topologyKey":"kubernetes.io/hostname"},"weight":5}]}},"containers":[{"args":["--save","","--appendonly","no","--requirepass $(REDIS_PASSWORD)"],"env":[{"name":"REDIS_PASSWORD","valueFrom":{"secretKeyRef":{"key":"auth","name":"argocd-redis"}}}],"image":"redis:7.0.15-alpine","imagePullPolicy":"Always","name":"redis","ports":[{"containerPort":6379}],"securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"drop":["ALL"]},"readOnlyRootFilesystem":true}}],"initContainers":[{"command":["argocd","admin","redis-initial-password"],"image":"quay.io/argoproj/argocd:v2.12.3","imagePullPolicy":"IfNotPresent","name":"secret-init","securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"drop":["ALL"]},"readOnlyRootFilesystem":true,"runAsNonRoot":true,"seccompProfile":{"type":"RuntimeDefault"}}}],"securityContext":{"runAsNonRoot":true,"runAsUser":999,"seccompProfile":{"type":"RuntimeDefault"}},"serviceAccountName":"argocd-redis"}}}}
    creationTimestamp: "2024-10-07T18:49:31Z"
    generation: 1
    labels:
      app.kubernetes.io/component: redis
      app.kubernetes.io/name: argocd-redis
      app.kubernetes.io/part-of: argocd
    name: argocd-redis
    namespace: argocd
    resourceVersion: "712066"
    uid: bfc7311f-9ad3-4c5c-8032-8a2c181abf44
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/name: argocd-redis
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/name: argocd-redis
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: argocd-redis
                topologyKey: kubernetes.io/hostname
              weight: 100
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/part-of: argocd
                topologyKey: kubernetes.io/hostname
              weight: 5
        containers:
        - args:
          - --save
          - ""
          - --appendonly
          - "no"
          - --requirepass $(REDIS_PASSWORD)
          env:
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                key: auth
                name: argocd-redis
          image: redis:7.0.15-alpine
          imagePullPolicy: Always
          name: redis
          ports:
          - containerPort: 6379
            protocol: TCP
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        initContainers:
        - command:
          - argocd
          - admin
          - redis-initial-password
          image: quay.io/argoproj/argocd:v2.12.3
          imagePullPolicy: IfNotPresent
          name: secret-init
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
          runAsUser: 999
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: argocd-redis
        serviceAccountName: argocd-redis
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-10-07T18:49:49Z"
      lastUpdateTime: "2024-10-07T18:49:49Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2024-10-07T18:49:31Z"
      lastUpdateTime: "2024-10-07T18:49:49Z"
      message: ReplicaSet "argocd-redis-74b8999f94" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app.kubernetes.io/component":"repo-server","app.kubernetes.io/name":"argocd-repo-server","app.kubernetes.io/part-of":"argocd"},"name":"argocd-repo-server","namespace":"argocd"},"spec":{"selector":{"matchLabels":{"app.kubernetes.io/name":"argocd-repo-server"}},"template":{"metadata":{"labels":{"app.kubernetes.io/name":"argocd-repo-server"}},"spec":{"affinity":{"podAntiAffinity":{"preferredDuringSchedulingIgnoredDuringExecution":[{"podAffinityTerm":{"labelSelector":{"matchLabels":{"app.kubernetes.io/name":"argocd-repo-server"}},"topologyKey":"kubernetes.io/hostname"},"weight":100},{"podAffinityTerm":{"labelSelector":{"matchLabels":{"app.kubernetes.io/part-of":"argocd"}},"topologyKey":"kubernetes.io/hostname"},"weight":5}]}},"automountServiceAccountToken":false,"containers":[{"args":["/usr/local/bin/argocd-repo-server"],"env":[{"name":"REDIS_PASSWORD","valueFrom":{"secretKeyRef":{"key":"auth","name":"argocd-redis"}}},{"name":"ARGOCD_RECONCILIATION_TIMEOUT","valueFrom":{"configMapKeyRef":{"key":"timeout.reconciliation","name":"argocd-cm","optional":true}}},{"name":"ARGOCD_REPO_SERVER_LOGFORMAT","valueFrom":{"configMapKeyRef":{"key":"reposerver.log.format","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_REPO_SERVER_LOGLEVEL","valueFrom":{"configMapKeyRef":{"key":"reposerver.log.level","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_REPO_SERVER_PARALLELISM_LIMIT","valueFrom":{"configMapKeyRef":{"key":"reposerver.parallelism.limit","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_REPO_SERVER_LISTEN_ADDRESS","valueFrom":{"configMapKeyRef":{"key":"reposerver.listen.address","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_REPO_SERVER_LISTEN_METRICS_ADDRESS","valueFrom":{"configMapKeyRef":{"key":"reposerver.metrics.listen.address","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_REPO_SERVER_DISABLE_TLS","valueFrom":{"configMapKeyRef":{"key":"reposerver.disable.tls","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_TLS_MIN_VERSION","valueFrom":{"configMapKeyRef":{"key":"reposerver.tls.minversion","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_TLS_MAX_VERSION","valueFrom":{"configMapKeyRef":{"key":"reposerver.tls.maxversion","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_TLS_CIPHERS","valueFrom":{"configMapKeyRef":{"key":"reposerver.tls.ciphers","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_REPO_CACHE_EXPIRATION","valueFrom":{"configMapKeyRef":{"key":"reposerver.repo.cache.expiration","name":"argocd-cmd-params-cm","optional":true}}},{"name":"REDIS_SERVER","valueFrom":{"configMapKeyRef":{"key":"redis.server","name":"argocd-cmd-params-cm","optional":true}}},{"name":"REDIS_COMPRESSION","valueFrom":{"configMapKeyRef":{"key":"redis.compression","name":"argocd-cmd-params-cm","optional":true}}},{"name":"REDISDB","valueFrom":{"configMapKeyRef":{"key":"redis.db","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_DEFAULT_CACHE_EXPIRATION","valueFrom":{"configMapKeyRef":{"key":"reposerver.default.cache.expiration","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_REPO_SERVER_OTLP_ADDRESS","valueFrom":{"configMapKeyRef":{"key":"otlp.address","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_REPO_SERVER_OTLP_INSECURE","valueFrom":{"configMapKeyRef":{"key":"otlp.insecure","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_REPO_SERVER_OTLP_HEADERS","valueFrom":{"configMapKeyRef":{"key":"otlp.headers","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_REPO_SERVER_MAX_COMBINED_DIRECTORY_MANIFESTS_SIZE","valueFrom":{"configMapKeyRef":{"key":"reposerver.max.combined.directory.manifests.size","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_REPO_SERVER_PLUGIN_TAR_EXCLUSIONS","valueFrom":{"configMapKeyRef":{"key":"reposerver.plugin.tar.exclusions","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_REPO_SERVER_ALLOW_OUT_OF_BOUNDS_SYMLINKS","valueFrom":{"configMapKeyRef":{"key":"reposerver.allow.oob.symlinks","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_REPO_SERVER_STREAMED_MANIFEST_MAX_TAR_SIZE","valueFrom":{"configMapKeyRef":{"key":"reposerver.streamed.manifest.max.tar.size","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_REPO_SERVER_STREAMED_MANIFEST_MAX_EXTRACTED_SIZE","valueFrom":{"configMapKeyRef":{"key":"reposerver.streamed.manifest.max.extracted.size","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_REPO_SERVER_HELM_MANIFEST_MAX_EXTRACTED_SIZE","valueFrom":{"configMapKeyRef":{"key":"reposerver.helm.manifest.max.extracted.size","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_REPO_SERVER_DISABLE_HELM_MANIFEST_MAX_EXTRACTED_SIZE","valueFrom":{"configMapKeyRef":{"key":"reposerver.disable.helm.manifest.max.extracted.size","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_REVISION_CACHE_LOCK_TIMEOUT","valueFrom":{"configMapKeyRef":{"key":"reposerver.revision.cache.lock.timeout","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_GIT_MODULES_ENABLED","valueFrom":{"configMapKeyRef":{"key":"reposerver.enable.git.submodule","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_GIT_LS_REMOTE_PARALLELISM_LIMIT","valueFrom":{"configMapKeyRef":{"key":"reposerver.git.lsremote.parallelism.limit","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_GIT_REQUEST_TIMEOUT","valueFrom":{"configMapKeyRef":{"key":"reposerver.git.request.timeout","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_GRPC_MAX_SIZE_MB","valueFrom":{"configMapKeyRef":{"key":"reposerver.grpc.max.size","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_REPO_SERVER_INCLUDE_HIDDEN_DIRECTORIES","valueFrom":{"configMapKeyRef":{"key":"reposerver.include.hidden.directories","name":"argocd-cmd-params-cm","optional":true}}},{"name":"HELM_CACHE_HOME","value":"/helm-working-dir"},{"name":"HELM_CONFIG_HOME","value":"/helm-working-dir"},{"name":"HELM_DATA_HOME","value":"/helm-working-dir"}],"image":"quay.io/argoproj/argocd:v2.12.3","imagePullPolicy":"Always","livenessProbe":{"failureThreshold":3,"httpGet":{"path":"/healthz?full=true","port":8084},"initialDelaySeconds":30,"periodSeconds":30,"timeoutSeconds":5},"name":"argocd-repo-server","ports":[{"containerPort":8081},{"containerPort":8084}],"readinessProbe":{"httpGet":{"path":"/healthz","port":8084},"initialDelaySeconds":5,"periodSeconds":10},"securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"drop":["ALL"]},"readOnlyRootFilesystem":true,"runAsNonRoot":true,"seccompProfile":{"type":"RuntimeDefault"}},"volumeMounts":[{"mountPath":"/app/config/ssh","name":"ssh-known-hosts"},{"mountPath":"/app/config/tls","name":"tls-certs"},{"mountPath":"/app/config/gpg/source","name":"gpg-keys"},{"mountPath":"/app/config/gpg/keys","name":"gpg-keyring"},{"mountPath":"/app/config/reposerver/tls","name":"argocd-repo-server-tls"},{"mountPath":"/tmp","name":"tmp"},{"mountPath":"/helm-working-dir","name":"helm-working-dir"},{"mountPath":"/home/argocd/cmp-server/plugins","name":"plugins"}]}],"initContainers":[{"command":["/bin/cp","-n","/usr/local/bin/argocd","/var/run/argocd/argocd-cmp-server"],"image":"quay.io/argoproj/argocd:v2.12.3","name":"copyutil","securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"drop":["ALL"]},"readOnlyRootFilesystem":true,"runAsNonRoot":true,"seccompProfile":{"type":"RuntimeDefault"}},"volumeMounts":[{"mountPath":"/var/run/argocd","name":"var-files"}]}],"serviceAccountName":"argocd-repo-server","volumes":[{"configMap":{"name":"argocd-ssh-known-hosts-cm"},"name":"ssh-known-hosts"},{"configMap":{"name":"argocd-tls-certs-cm"},"name":"tls-certs"},{"configMap":{"name":"argocd-gpg-keys-cm"},"name":"gpg-keys"},{"emptyDir":{},"name":"gpg-keyring"},{"emptyDir":{},"name":"tmp"},{"emptyDir":{},"name":"helm-working-dir"},{"name":"argocd-repo-server-tls","secret":{"items":[{"key":"tls.crt","path":"tls.crt"},{"key":"tls.key","path":"tls.key"},{"key":"ca.crt","path":"ca.crt"}],"optional":true,"secretName":"argocd-repo-server-tls"}},{"emptyDir":{},"name":"var-files"},{"emptyDir":{},"name":"plugins"}]}}}}
    creationTimestamp: "2024-10-07T18:49:31Z"
    generation: 1
    labels:
      app.kubernetes.io/component: repo-server
      app.kubernetes.io/name: argocd-repo-server
      app.kubernetes.io/part-of: argocd
    name: argocd-repo-server
    namespace: argocd
    resourceVersion: "712082"
    uid: a8a0dc0b-4512-44b3-881e-5473646e46b3
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/name: argocd-repo-server
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/name: argocd-repo-server
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: argocd-repo-server
                topologyKey: kubernetes.io/hostname
              weight: 100
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/part-of: argocd
                topologyKey: kubernetes.io/hostname
              weight: 5
        automountServiceAccountToken: false
        containers:
        - args:
          - /usr/local/bin/argocd-repo-server
          env:
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                key: auth
                name: argocd-redis
          - name: ARGOCD_RECONCILIATION_TIMEOUT
            valueFrom:
              configMapKeyRef:
                key: timeout.reconciliation
                name: argocd-cm
                optional: true
          - name: ARGOCD_REPO_SERVER_LOGFORMAT
            valueFrom:
              configMapKeyRef:
                key: reposerver.log.format
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_REPO_SERVER_LOGLEVEL
            valueFrom:
              configMapKeyRef:
                key: reposerver.log.level
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_REPO_SERVER_PARALLELISM_LIMIT
            valueFrom:
              configMapKeyRef:
                key: reposerver.parallelism.limit
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_REPO_SERVER_LISTEN_ADDRESS
            valueFrom:
              configMapKeyRef:
                key: reposerver.listen.address
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_REPO_SERVER_LISTEN_METRICS_ADDRESS
            valueFrom:
              configMapKeyRef:
                key: reposerver.metrics.listen.address
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_REPO_SERVER_DISABLE_TLS
            valueFrom:
              configMapKeyRef:
                key: reposerver.disable.tls
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_TLS_MIN_VERSION
            valueFrom:
              configMapKeyRef:
                key: reposerver.tls.minversion
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_TLS_MAX_VERSION
            valueFrom:
              configMapKeyRef:
                key: reposerver.tls.maxversion
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_TLS_CIPHERS
            valueFrom:
              configMapKeyRef:
                key: reposerver.tls.ciphers
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_REPO_CACHE_EXPIRATION
            valueFrom:
              configMapKeyRef:
                key: reposerver.repo.cache.expiration
                name: argocd-cmd-params-cm
                optional: true
          - name: REDIS_SERVER
            valueFrom:
              configMapKeyRef:
                key: redis.server
                name: argocd-cmd-params-cm
                optional: true
          - name: REDIS_COMPRESSION
            valueFrom:
              configMapKeyRef:
                key: redis.compression
                name: argocd-cmd-params-cm
                optional: true
          - name: REDISDB
            valueFrom:
              configMapKeyRef:
                key: redis.db
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_DEFAULT_CACHE_EXPIRATION
            valueFrom:
              configMapKeyRef:
                key: reposerver.default.cache.expiration
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_REPO_SERVER_OTLP_ADDRESS
            valueFrom:
              configMapKeyRef:
                key: otlp.address
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_REPO_SERVER_OTLP_INSECURE
            valueFrom:
              configMapKeyRef:
                key: otlp.insecure
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_REPO_SERVER_OTLP_HEADERS
            valueFrom:
              configMapKeyRef:
                key: otlp.headers
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_REPO_SERVER_MAX_COMBINED_DIRECTORY_MANIFESTS_SIZE
            valueFrom:
              configMapKeyRef:
                key: reposerver.max.combined.directory.manifests.size
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_REPO_SERVER_PLUGIN_TAR_EXCLUSIONS
            valueFrom:
              configMapKeyRef:
                key: reposerver.plugin.tar.exclusions
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_REPO_SERVER_ALLOW_OUT_OF_BOUNDS_SYMLINKS
            valueFrom:
              configMapKeyRef:
                key: reposerver.allow.oob.symlinks
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_REPO_SERVER_STREAMED_MANIFEST_MAX_TAR_SIZE
            valueFrom:
              configMapKeyRef:
                key: reposerver.streamed.manifest.max.tar.size
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_REPO_SERVER_STREAMED_MANIFEST_MAX_EXTRACTED_SIZE
            valueFrom:
              configMapKeyRef:
                key: reposerver.streamed.manifest.max.extracted.size
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_REPO_SERVER_HELM_MANIFEST_MAX_EXTRACTED_SIZE
            valueFrom:
              configMapKeyRef:
                key: reposerver.helm.manifest.max.extracted.size
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_REPO_SERVER_DISABLE_HELM_MANIFEST_MAX_EXTRACTED_SIZE
            valueFrom:
              configMapKeyRef:
                key: reposerver.disable.helm.manifest.max.extracted.size
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_REVISION_CACHE_LOCK_TIMEOUT
            valueFrom:
              configMapKeyRef:
                key: reposerver.revision.cache.lock.timeout
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_GIT_MODULES_ENABLED
            valueFrom:
              configMapKeyRef:
                key: reposerver.enable.git.submodule
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_GIT_LS_REMOTE_PARALLELISM_LIMIT
            valueFrom:
              configMapKeyRef:
                key: reposerver.git.lsremote.parallelism.limit
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_GIT_REQUEST_TIMEOUT
            valueFrom:
              configMapKeyRef:
                key: reposerver.git.request.timeout
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_GRPC_MAX_SIZE_MB
            valueFrom:
              configMapKeyRef:
                key: reposerver.grpc.max.size
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_REPO_SERVER_INCLUDE_HIDDEN_DIRECTORIES
            valueFrom:
              configMapKeyRef:
                key: reposerver.include.hidden.directories
                name: argocd-cmd-params-cm
                optional: true
          - name: HELM_CACHE_HOME
            value: /helm-working-dir
          - name: HELM_CONFIG_HOME
            value: /helm-working-dir
          - name: HELM_DATA_HOME
            value: /helm-working-dir
          image: quay.io/argoproj/argocd:v2.12.3
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz?full=true
              port: 8084
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 5
          name: argocd-repo-server
          ports:
          - containerPort: 8081
            protocol: TCP
          - containerPort: 8084
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 8084
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /app/config/ssh
            name: ssh-known-hosts
          - mountPath: /app/config/tls
            name: tls-certs
          - mountPath: /app/config/gpg/source
            name: gpg-keys
          - mountPath: /app/config/gpg/keys
            name: gpg-keyring
          - mountPath: /app/config/reposerver/tls
            name: argocd-repo-server-tls
          - mountPath: /tmp
            name: tmp
          - mountPath: /helm-working-dir
            name: helm-working-dir
          - mountPath: /home/argocd/cmp-server/plugins
            name: plugins
        dnsPolicy: ClusterFirst
        initContainers:
        - command:
          - /bin/cp
          - -n
          - /usr/local/bin/argocd
          - /var/run/argocd/argocd-cmp-server
          image: quay.io/argoproj/argocd:v2.12.3
          imagePullPolicy: IfNotPresent
          name: copyutil
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/run/argocd
            name: var-files
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: argocd-repo-server
        serviceAccountName: argocd-repo-server
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            name: argocd-ssh-known-hosts-cm
          name: ssh-known-hosts
        - configMap:
            defaultMode: 420
            name: argocd-tls-certs-cm
          name: tls-certs
        - configMap:
            defaultMode: 420
            name: argocd-gpg-keys-cm
          name: gpg-keys
        - emptyDir: {}
          name: gpg-keyring
        - emptyDir: {}
          name: tmp
        - emptyDir: {}
          name: helm-working-dir
        - name: argocd-repo-server-tls
          secret:
            defaultMode: 420
            items:
            - key: tls.crt
              path: tls.crt
            - key: tls.key
              path: tls.key
            - key: ca.crt
              path: ca.crt
            optional: true
            secretName: argocd-repo-server-tls
        - emptyDir: {}
          name: var-files
        - emptyDir: {}
          name: plugins
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-10-07T18:49:52Z"
      lastUpdateTime: "2024-10-07T18:49:52Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2024-10-07T18:49:31Z"
      lastUpdateTime: "2024-10-07T18:49:52Z"
      message: ReplicaSet "argocd-repo-server-57f4899557" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app.kubernetes.io/component":"server","app.kubernetes.io/name":"argocd-server","app.kubernetes.io/part-of":"argocd"},"name":"argocd-server","namespace":"argocd"},"spec":{"selector":{"matchLabels":{"app.kubernetes.io/name":"argocd-server"}},"template":{"metadata":{"labels":{"app.kubernetes.io/name":"argocd-server"}},"spec":{"affinity":{"podAntiAffinity":{"preferredDuringSchedulingIgnoredDuringExecution":[{"podAffinityTerm":{"labelSelector":{"matchLabels":{"app.kubernetes.io/name":"argocd-server"}},"topologyKey":"kubernetes.io/hostname"},"weight":100},{"podAffinityTerm":{"labelSelector":{"matchLabels":{"app.kubernetes.io/part-of":"argocd"}},"topologyKey":"kubernetes.io/hostname"},"weight":5}]}},"containers":[{"args":["/usr/local/bin/argocd-server"],"env":[{"name":"REDIS_PASSWORD","valueFrom":{"secretKeyRef":{"key":"auth","name":"argocd-redis"}}},{"name":"ARGOCD_SERVER_INSECURE","valueFrom":{"configMapKeyRef":{"key":"server.insecure","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_SERVER_BASEHREF","valueFrom":{"configMapKeyRef":{"key":"server.basehref","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_SERVER_ROOTPATH","valueFrom":{"configMapKeyRef":{"key":"server.rootpath","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_SERVER_LOGFORMAT","valueFrom":{"configMapKeyRef":{"key":"server.log.format","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_SERVER_LOG_LEVEL","valueFrom":{"configMapKeyRef":{"key":"server.log.level","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_SERVER_REPO_SERVER","valueFrom":{"configMapKeyRef":{"key":"repo.server","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_SERVER_DEX_SERVER","valueFrom":{"configMapKeyRef":{"key":"server.dex.server","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_SERVER_DISABLE_AUTH","valueFrom":{"configMapKeyRef":{"key":"server.disable.auth","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_SERVER_ENABLE_GZIP","valueFrom":{"configMapKeyRef":{"key":"server.enable.gzip","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_SERVER_REPO_SERVER_TIMEOUT_SECONDS","valueFrom":{"configMapKeyRef":{"key":"server.repo.server.timeout.seconds","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_SERVER_X_FRAME_OPTIONS","valueFrom":{"configMapKeyRef":{"key":"server.x.frame.options","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_SERVER_CONTENT_SECURITY_POLICY","valueFrom":{"configMapKeyRef":{"key":"server.content.security.policy","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_SERVER_REPO_SERVER_PLAINTEXT","valueFrom":{"configMapKeyRef":{"key":"server.repo.server.plaintext","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_SERVER_REPO_SERVER_STRICT_TLS","valueFrom":{"configMapKeyRef":{"key":"server.repo.server.strict.tls","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_SERVER_DEX_SERVER_PLAINTEXT","valueFrom":{"configMapKeyRef":{"key":"server.dex.server.plaintext","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_SERVER_DEX_SERVER_STRICT_TLS","valueFrom":{"configMapKeyRef":{"key":"server.dex.server.strict.tls","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_TLS_MIN_VERSION","valueFrom":{"configMapKeyRef":{"key":"server.tls.minversion","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_TLS_MAX_VERSION","valueFrom":{"configMapKeyRef":{"key":"server.tls.maxversion","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_TLS_CIPHERS","valueFrom":{"configMapKeyRef":{"key":"server.tls.ciphers","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_SERVER_CONNECTION_STATUS_CACHE_EXPIRATION","valueFrom":{"configMapKeyRef":{"key":"server.connection.status.cache.expiration","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_SERVER_OIDC_CACHE_EXPIRATION","valueFrom":{"configMapKeyRef":{"key":"server.oidc.cache.expiration","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_SERVER_LOGIN_ATTEMPTS_EXPIRATION","valueFrom":{"configMapKeyRef":{"key":"server.login.attempts.expiration","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_SERVER_STATIC_ASSETS","valueFrom":{"configMapKeyRef":{"key":"server.staticassets","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_APP_STATE_CACHE_EXPIRATION","valueFrom":{"configMapKeyRef":{"key":"server.app.state.cache.expiration","name":"argocd-cmd-params-cm","optional":true}}},{"name":"REDIS_SERVER","valueFrom":{"configMapKeyRef":{"key":"redis.server","name":"argocd-cmd-params-cm","optional":true}}},{"name":"REDIS_COMPRESSION","valueFrom":{"configMapKeyRef":{"key":"redis.compression","name":"argocd-cmd-params-cm","optional":true}}},{"name":"REDISDB","valueFrom":{"configMapKeyRef":{"key":"redis.db","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_DEFAULT_CACHE_EXPIRATION","valueFrom":{"configMapKeyRef":{"key":"server.default.cache.expiration","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_MAX_COOKIE_NUMBER","valueFrom":{"configMapKeyRef":{"key":"server.http.cookie.maxnumber","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_SERVER_LISTEN_ADDRESS","valueFrom":{"configMapKeyRef":{"key":"server.listen.address","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_SERVER_METRICS_LISTEN_ADDRESS","valueFrom":{"configMapKeyRef":{"key":"server.metrics.listen.address","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_SERVER_OTLP_ADDRESS","valueFrom":{"configMapKeyRef":{"key":"otlp.address","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_SERVER_OTLP_INSECURE","valueFrom":{"configMapKeyRef":{"key":"otlp.insecure","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_SERVER_OTLP_HEADERS","valueFrom":{"configMapKeyRef":{"key":"otlp.headers","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_APPLICATION_NAMESPACES","valueFrom":{"configMapKeyRef":{"key":"application.namespaces","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_SERVER_ENABLE_PROXY_EXTENSION","valueFrom":{"configMapKeyRef":{"key":"server.enable.proxy.extension","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_K8SCLIENT_RETRY_MAX","valueFrom":{"configMapKeyRef":{"key":"server.k8sclient.retry.max","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_K8SCLIENT_RETRY_BASE_BACKOFF","valueFrom":{"configMapKeyRef":{"key":"server.k8sclient.retry.base.backoff","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_API_CONTENT_TYPES","valueFrom":{"configMapKeyRef":{"key":"server.api.content.types","name":"argocd-cmd-params-cm","optional":true}}}],"image":"quay.io/argoproj/argocd:v2.12.3","imagePullPolicy":"Always","livenessProbe":{"httpGet":{"path":"/healthz?full=true","port":8080},"initialDelaySeconds":3,"periodSeconds":30,"timeoutSeconds":5},"name":"argocd-server","ports":[{"containerPort":8080},{"containerPort":8083}],"readinessProbe":{"httpGet":{"path":"/healthz","port":8080},"initialDelaySeconds":3,"periodSeconds":30},"securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"drop":["ALL"]},"readOnlyRootFilesystem":true,"runAsNonRoot":true,"seccompProfile":{"type":"RuntimeDefault"}},"volumeMounts":[{"mountPath":"/app/config/ssh","name":"ssh-known-hosts"},{"mountPath":"/app/config/tls","name":"tls-certs"},{"mountPath":"/app/config/server/tls","name":"argocd-repo-server-tls"},{"mountPath":"/app/config/dex/tls","name":"argocd-dex-server-tls"},{"mountPath":"/home/argocd","name":"plugins-home"},{"mountPath":"/tmp","name":"tmp"}]}],"serviceAccountName":"argocd-server","volumes":[{"emptyDir":{},"name":"plugins-home"},{"emptyDir":{},"name":"tmp"},{"configMap":{"name":"argocd-ssh-known-hosts-cm"},"name":"ssh-known-hosts"},{"configMap":{"name":"argocd-tls-certs-cm"},"name":"tls-certs"},{"name":"argocd-repo-server-tls","secret":{"items":[{"key":"tls.crt","path":"tls.crt"},{"key":"tls.key","path":"tls.key"},{"key":"ca.crt","path":"ca.crt"}],"optional":true,"secretName":"argocd-repo-server-tls"}},{"name":"argocd-dex-server-tls","secret":{"items":[{"key":"tls.crt","path":"tls.crt"},{"key":"ca.crt","path":"ca.crt"}],"optional":true,"secretName":"argocd-dex-server-tls"}}]}}}}
    creationTimestamp: "2024-10-07T18:49:31Z"
    generation: 1
    labels:
      app.kubernetes.io/component: server
      app.kubernetes.io/name: argocd-server
      app.kubernetes.io/part-of: argocd
    name: argocd-server
    namespace: argocd
    resourceVersion: "712124"
    uid: ff714958-daa3-477c-89c1-c6371030be2f
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/name: argocd-server
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/name: argocd-server
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: argocd-server
                topologyKey: kubernetes.io/hostname
              weight: 100
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/part-of: argocd
                topologyKey: kubernetes.io/hostname
              weight: 5
        containers:
        - args:
          - /usr/local/bin/argocd-server
          env:
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                key: auth
                name: argocd-redis
          - name: ARGOCD_SERVER_INSECURE
            valueFrom:
              configMapKeyRef:
                key: server.insecure
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_BASEHREF
            valueFrom:
              configMapKeyRef:
                key: server.basehref
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_ROOTPATH
            valueFrom:
              configMapKeyRef:
                key: server.rootpath
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_LOGFORMAT
            valueFrom:
              configMapKeyRef:
                key: server.log.format
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_LOG_LEVEL
            valueFrom:
              configMapKeyRef:
                key: server.log.level
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_REPO_SERVER
            valueFrom:
              configMapKeyRef:
                key: repo.server
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_DEX_SERVER
            valueFrom:
              configMapKeyRef:
                key: server.dex.server
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_DISABLE_AUTH
            valueFrom:
              configMapKeyRef:
                key: server.disable.auth
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_ENABLE_GZIP
            valueFrom:
              configMapKeyRef:
                key: server.enable.gzip
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_REPO_SERVER_TIMEOUT_SECONDS
            valueFrom:
              configMapKeyRef:
                key: server.repo.server.timeout.seconds
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_X_FRAME_OPTIONS
            valueFrom:
              configMapKeyRef:
                key: server.x.frame.options
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_CONTENT_SECURITY_POLICY
            valueFrom:
              configMapKeyRef:
                key: server.content.security.policy
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_REPO_SERVER_PLAINTEXT
            valueFrom:
              configMapKeyRef:
                key: server.repo.server.plaintext
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_REPO_SERVER_STRICT_TLS
            valueFrom:
              configMapKeyRef:
                key: server.repo.server.strict.tls
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_DEX_SERVER_PLAINTEXT
            valueFrom:
              configMapKeyRef:
                key: server.dex.server.plaintext
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_DEX_SERVER_STRICT_TLS
            valueFrom:
              configMapKeyRef:
                key: server.dex.server.strict.tls
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_TLS_MIN_VERSION
            valueFrom:
              configMapKeyRef:
                key: server.tls.minversion
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_TLS_MAX_VERSION
            valueFrom:
              configMapKeyRef:
                key: server.tls.maxversion
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_TLS_CIPHERS
            valueFrom:
              configMapKeyRef:
                key: server.tls.ciphers
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_CONNECTION_STATUS_CACHE_EXPIRATION
            valueFrom:
              configMapKeyRef:
                key: server.connection.status.cache.expiration
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_OIDC_CACHE_EXPIRATION
            valueFrom:
              configMapKeyRef:
                key: server.oidc.cache.expiration
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_LOGIN_ATTEMPTS_EXPIRATION
            valueFrom:
              configMapKeyRef:
                key: server.login.attempts.expiration
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_STATIC_ASSETS
            valueFrom:
              configMapKeyRef:
                key: server.staticassets
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APP_STATE_CACHE_EXPIRATION
            valueFrom:
              configMapKeyRef:
                key: server.app.state.cache.expiration
                name: argocd-cmd-params-cm
                optional: true
          - name: REDIS_SERVER
            valueFrom:
              configMapKeyRef:
                key: redis.server
                name: argocd-cmd-params-cm
                optional: true
          - name: REDIS_COMPRESSION
            valueFrom:
              configMapKeyRef:
                key: redis.compression
                name: argocd-cmd-params-cm
                optional: true
          - name: REDISDB
            valueFrom:
              configMapKeyRef:
                key: redis.db
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_DEFAULT_CACHE_EXPIRATION
            valueFrom:
              configMapKeyRef:
                key: server.default.cache.expiration
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_MAX_COOKIE_NUMBER
            valueFrom:
              configMapKeyRef:
                key: server.http.cookie.maxnumber
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_LISTEN_ADDRESS
            valueFrom:
              configMapKeyRef:
                key: server.listen.address
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_METRICS_LISTEN_ADDRESS
            valueFrom:
              configMapKeyRef:
                key: server.metrics.listen.address
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_OTLP_ADDRESS
            valueFrom:
              configMapKeyRef:
                key: otlp.address
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_OTLP_INSECURE
            valueFrom:
              configMapKeyRef:
                key: otlp.insecure
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_OTLP_HEADERS
            valueFrom:
              configMapKeyRef:
                key: otlp.headers
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATION_NAMESPACES
            valueFrom:
              configMapKeyRef:
                key: application.namespaces
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_ENABLE_PROXY_EXTENSION
            valueFrom:
              configMapKeyRef:
                key: server.enable.proxy.extension
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_K8SCLIENT_RETRY_MAX
            valueFrom:
              configMapKeyRef:
                key: server.k8sclient.retry.max
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_K8SCLIENT_RETRY_BASE_BACKOFF
            valueFrom:
              configMapKeyRef:
                key: server.k8sclient.retry.base.backoff
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_API_CONTENT_TYPES
            valueFrom:
              configMapKeyRef:
                key: server.api.content.types
                name: argocd-cmd-params-cm
                optional: true
          image: quay.io/argoproj/argocd:v2.12.3
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz?full=true
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 3
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 5
          name: argocd-server
          ports:
          - containerPort: 8080
            protocol: TCP
          - containerPort: 8083
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 3
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /app/config/ssh
            name: ssh-known-hosts
          - mountPath: /app/config/tls
            name: tls-certs
          - mountPath: /app/config/server/tls
            name: argocd-repo-server-tls
          - mountPath: /app/config/dex/tls
            name: argocd-dex-server-tls
          - mountPath: /home/argocd
            name: plugins-home
          - mountPath: /tmp
            name: tmp
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: argocd-server
        serviceAccountName: argocd-server
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: plugins-home
        - emptyDir: {}
          name: tmp
        - configMap:
            defaultMode: 420
            name: argocd-ssh-known-hosts-cm
          name: ssh-known-hosts
        - configMap:
            defaultMode: 420
            name: argocd-tls-certs-cm
          name: tls-certs
        - name: argocd-repo-server-tls
          secret:
            defaultMode: 420
            items:
            - key: tls.crt
              path: tls.crt
            - key: tls.key
              path: tls.key
            - key: ca.crt
              path: ca.crt
            optional: true
            secretName: argocd-repo-server-tls
        - name: argocd-dex-server-tls
          secret:
            defaultMode: 420
            items:
            - key: tls.crt
              path: tls.crt
            - key: ca.crt
              path: ca.crt
            optional: true
            secretName: argocd-dex-server-tls
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-10-07T18:50:02Z"
      lastUpdateTime: "2024-10-07T18:50:02Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2024-10-07T18:49:31Z"
      lastUpdateTime: "2024-10-07T18:50:02Z"
      message: ReplicaSet "argocd-server-7bc7b97977" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-10-07T18:49:31Z"
    generation: 1
    labels:
      app.kubernetes.io/name: argocd-applicationset-controller
      pod-template-hash: 744b76d7fd
    name: argocd-applicationset-controller-744b76d7fd
    namespace: argocd
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: argocd-applicationset-controller
      uid: e181457a-8b3b-48ee-8781-923d8164aacc
    resourceVersion: "712002"
    uid: e6359437-7638-47d8-9087-2c225286535f
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/name: argocd-applicationset-controller
        pod-template-hash: 744b76d7fd
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/name: argocd-applicationset-controller
          pod-template-hash: 744b76d7fd
      spec:
        containers:
        - args:
          - /usr/local/bin/argocd-applicationset-controller
          env:
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_GLOBAL_PRESERVED_ANNOTATIONS
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.global.preserved.annotations
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_GLOBAL_PRESERVED_LABELS
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.global.preserved.labels
                name: argocd-cmd-params-cm
                optional: true
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_LEADER_ELECTION
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.enable.leader.election
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_REPO_SERVER
            valueFrom:
              configMapKeyRef:
                key: repo.server
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_POLICY
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.policy
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_POLICY_OVERRIDE
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.enable.policy.override
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_DEBUG
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.debug
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_LOGFORMAT
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.log.format
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_LOGLEVEL
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.log.level
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_DRY_RUN
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.dryrun
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_GIT_MODULES_ENABLED
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.enable.git.submodule
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_PROGRESSIVE_SYNCS
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.enable.progressive.syncs
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_NEW_GIT_FILE_GLOBBING
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.enable.new.git.file.globbing
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_REPO_SERVER_PLAINTEXT
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.repo.server.plaintext
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_REPO_SERVER_STRICT_TLS
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.repo.server.strict.tls
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_REPO_SERVER_TIMEOUT_SECONDS
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.repo.server.timeout.seconds
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_CONCURRENT_RECONCILIATIONS
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.concurrent.reconciliations.max
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_NAMESPACES
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.namespaces
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_SCM_ROOT_CA_PATH
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.scm.root.ca.path
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_ALLOWED_SCM_PROVIDERS
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.allowed.scm.providers
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_SCM_PROVIDERS
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.enable.scm.providers
                name: argocd-cmd-params-cm
                optional: true
          image: quay.io/argoproj/argocd:v2.12.3
          imagePullPolicy: Always
          name: argocd-applicationset-controller
          ports:
          - containerPort: 7000
            name: webhook
            protocol: TCP
          - containerPort: 8080
            name: metrics
            protocol: TCP
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /app/config/ssh
            name: ssh-known-hosts
          - mountPath: /app/config/tls
            name: tls-certs
          - mountPath: /app/config/gpg/source
            name: gpg-keys
          - mountPath: /app/config/gpg/keys
            name: gpg-keyring
          - mountPath: /tmp
            name: tmp
          - mountPath: /app/config/reposerver/tls
            name: argocd-repo-server-tls
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: argocd-applicationset-controller
        serviceAccountName: argocd-applicationset-controller
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            name: argocd-ssh-known-hosts-cm
          name: ssh-known-hosts
        - configMap:
            defaultMode: 420
            name: argocd-tls-certs-cm
          name: tls-certs
        - configMap:
            defaultMode: 420
            name: argocd-gpg-keys-cm
          name: gpg-keys
        - emptyDir: {}
          name: gpg-keyring
        - emptyDir: {}
          name: tmp
        - name: argocd-repo-server-tls
          secret:
            defaultMode: 420
            items:
            - key: tls.crt
              path: tls.crt
            - key: tls.key
              path: tls.key
            - key: ca.crt
              path: ca.crt
            optional: true
            secretName: argocd-repo-server-tls
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-10-07T18:49:31Z"
    generation: 1
    labels:
      app.kubernetes.io/name: argocd-dex-server
      pod-template-hash: 5bf5dbc64d
    name: argocd-dex-server-5bf5dbc64d
    namespace: argocd
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: argocd-dex-server
      uid: 15b06087-a05c-40cb-bb14-310d748d23cb
    resourceVersion: "712059"
    uid: 44b52e11-01c4-43f3-9a92-078cfcec4be7
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/name: argocd-dex-server
        pod-template-hash: 5bf5dbc64d
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/name: argocd-dex-server
          pod-template-hash: 5bf5dbc64d
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/part-of: argocd
                topologyKey: kubernetes.io/hostname
              weight: 5
        containers:
        - command:
          - /shared/argocd-dex
          - rundex
          env:
          - name: ARGOCD_DEX_SERVER_DISABLE_TLS
            valueFrom:
              configMapKeyRef:
                key: dexserver.disable.tls
                name: argocd-cmd-params-cm
                optional: true
          image: ghcr.io/dexidp/dex:v2.38.0
          imagePullPolicy: Always
          name: dex
          ports:
          - containerPort: 5556
            protocol: TCP
          - containerPort: 5557
            protocol: TCP
          - containerPort: 5558
            protocol: TCP
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /shared
            name: static-files
          - mountPath: /tmp
            name: dexconfig
          - mountPath: /tls
            name: argocd-dex-server-tls
        dnsPolicy: ClusterFirst
        initContainers:
        - command:
          - /bin/cp
          - -n
          - /usr/local/bin/argocd
          - /shared/argocd-dex
          image: quay.io/argoproj/argocd:v2.12.3
          imagePullPolicy: Always
          name: copyutil
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /shared
            name: static-files
          - mountPath: /tmp
            name: dexconfig
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: argocd-dex-server
        serviceAccountName: argocd-dex-server
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: static-files
        - emptyDir: {}
          name: dexconfig
        - name: argocd-dex-server-tls
          secret:
            defaultMode: 420
            items:
            - key: tls.crt
              path: tls.crt
            - key: tls.key
              path: tls.key
            - key: ca.crt
              path: ca.crt
            optional: true
            secretName: argocd-dex-server-tls
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "1"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-10-07T18:49:31Z"
    generation: 1
    labels:
      app.kubernetes.io/name: argocd-notifications-controller
      pod-template-hash: 84f5bf6896
    name: argocd-notifications-controller-84f5bf6896
    namespace: argocd
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: argocd-notifications-controller
      uid: 7d582895-4882-4099-8e70-699b49215580
    resourceVersion: "711991"
    uid: f5746bed-ec5c-48fb-8788-5f95c3e0eef1
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/name: argocd-notifications-controller
        pod-template-hash: 84f5bf6896
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/name: argocd-notifications-controller
          pod-template-hash: 84f5bf6896
      spec:
        containers:
        - args:
          - /usr/local/bin/argocd-notifications
          env:
          - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
            valueFrom:
              configMapKeyRef:
                key: notificationscontroller.log.format
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGLEVEL
            valueFrom:
              configMapKeyRef:
                key: notificationscontroller.log.level
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATION_NAMESPACES
            valueFrom:
              configMapKeyRef:
                key: application.namespaces
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_NOTIFICATION_CONTROLLER_SELF_SERVICE_NOTIFICATION_ENABLED
            valueFrom:
              configMapKeyRef:
                key: notificationscontroller.selfservice.enabled
                name: argocd-cmd-params-cm
                optional: true
          image: quay.io/argoproj/argocd:v2.12.3
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 3
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 9001
            timeoutSeconds: 1
          name: argocd-notifications-controller
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /app/config/tls
            name: tls-certs
          - mountPath: /app/config/reposerver/tls
            name: argocd-repo-server-tls
          workingDir: /app
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: argocd-notifications-controller
        serviceAccountName: argocd-notifications-controller
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            name: argocd-tls-certs-cm
          name: tls-certs
        - name: argocd-repo-server-tls
          secret:
            defaultMode: 420
            items:
            - key: tls.crt
              path: tls.crt
            - key: tls.key
              path: tls.key
            - key: ca.crt
              path: ca.crt
            optional: true
            secretName: argocd-repo-server-tls
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-10-07T18:49:31Z"
    generation: 1
    labels:
      app.kubernetes.io/name: argocd-redis
      pod-template-hash: 74b8999f94
    name: argocd-redis-74b8999f94
    namespace: argocd
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: argocd-redis
      uid: bfc7311f-9ad3-4c5c-8032-8a2c181abf44
    resourceVersion: "712064"
    uid: 4932b227-b2d2-4978-8dc5-6b9e69413e1c
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/name: argocd-redis
        pod-template-hash: 74b8999f94
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/name: argocd-redis
          pod-template-hash: 74b8999f94
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: argocd-redis
                topologyKey: kubernetes.io/hostname
              weight: 100
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/part-of: argocd
                topologyKey: kubernetes.io/hostname
              weight: 5
        containers:
        - args:
          - --save
          - ""
          - --appendonly
          - "no"
          - --requirepass $(REDIS_PASSWORD)
          env:
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                key: auth
                name: argocd-redis
          image: redis:7.0.15-alpine
          imagePullPolicy: Always
          name: redis
          ports:
          - containerPort: 6379
            protocol: TCP
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        initContainers:
        - command:
          - argocd
          - admin
          - redis-initial-password
          image: quay.io/argoproj/argocd:v2.12.3
          imagePullPolicy: IfNotPresent
          name: secret-init
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
          runAsUser: 999
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: argocd-redis
        serviceAccountName: argocd-redis
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-10-07T18:49:31Z"
    generation: 1
    labels:
      app.kubernetes.io/name: argocd-repo-server
      pod-template-hash: 57f4899557
    name: argocd-repo-server-57f4899557
    namespace: argocd
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: argocd-repo-server
      uid: a8a0dc0b-4512-44b3-881e-5473646e46b3
    resourceVersion: "712080"
    uid: 7bcd3f12-d8d0-41c7-8dae-07c6e864254a
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/name: argocd-repo-server
        pod-template-hash: 57f4899557
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/name: argocd-repo-server
          pod-template-hash: 57f4899557
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: argocd-repo-server
                topologyKey: kubernetes.io/hostname
              weight: 100
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/part-of: argocd
                topologyKey: kubernetes.io/hostname
              weight: 5
        automountServiceAccountToken: false
        containers:
        - args:
          - /usr/local/bin/argocd-repo-server
          env:
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                key: auth
                name: argocd-redis
          - name: ARGOCD_RECONCILIATION_TIMEOUT
            valueFrom:
              configMapKeyRef:
                key: timeout.reconciliation
                name: argocd-cm
                optional: true
          - name: ARGOCD_REPO_SERVER_LOGFORMAT
            valueFrom:
              configMapKeyRef:
                key: reposerver.log.format
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_REPO_SERVER_LOGLEVEL
            valueFrom:
              configMapKeyRef:
                key: reposerver.log.level
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_REPO_SERVER_PARALLELISM_LIMIT
            valueFrom:
              configMapKeyRef:
                key: reposerver.parallelism.limit
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_REPO_SERVER_LISTEN_ADDRESS
            valueFrom:
              configMapKeyRef:
                key: reposerver.listen.address
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_REPO_SERVER_LISTEN_METRICS_ADDRESS
            valueFrom:
              configMapKeyRef:
                key: reposerver.metrics.listen.address
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_REPO_SERVER_DISABLE_TLS
            valueFrom:
              configMapKeyRef:
                key: reposerver.disable.tls
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_TLS_MIN_VERSION
            valueFrom:
              configMapKeyRef:
                key: reposerver.tls.minversion
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_TLS_MAX_VERSION
            valueFrom:
              configMapKeyRef:
                key: reposerver.tls.maxversion
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_TLS_CIPHERS
            valueFrom:
              configMapKeyRef:
                key: reposerver.tls.ciphers
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_REPO_CACHE_EXPIRATION
            valueFrom:
              configMapKeyRef:
                key: reposerver.repo.cache.expiration
                name: argocd-cmd-params-cm
                optional: true
          - name: REDIS_SERVER
            valueFrom:
              configMapKeyRef:
                key: redis.server
                name: argocd-cmd-params-cm
                optional: true
          - name: REDIS_COMPRESSION
            valueFrom:
              configMapKeyRef:
                key: redis.compression
                name: argocd-cmd-params-cm
                optional: true
          - name: REDISDB
            valueFrom:
              configMapKeyRef:
                key: redis.db
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_DEFAULT_CACHE_EXPIRATION
            valueFrom:
              configMapKeyRef:
                key: reposerver.default.cache.expiration
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_REPO_SERVER_OTLP_ADDRESS
            valueFrom:
              configMapKeyRef:
                key: otlp.address
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_REPO_SERVER_OTLP_INSECURE
            valueFrom:
              configMapKeyRef:
                key: otlp.insecure
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_REPO_SERVER_OTLP_HEADERS
            valueFrom:
              configMapKeyRef:
                key: otlp.headers
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_REPO_SERVER_MAX_COMBINED_DIRECTORY_MANIFESTS_SIZE
            valueFrom:
              configMapKeyRef:
                key: reposerver.max.combined.directory.manifests.size
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_REPO_SERVER_PLUGIN_TAR_EXCLUSIONS
            valueFrom:
              configMapKeyRef:
                key: reposerver.plugin.tar.exclusions
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_REPO_SERVER_ALLOW_OUT_OF_BOUNDS_SYMLINKS
            valueFrom:
              configMapKeyRef:
                key: reposerver.allow.oob.symlinks
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_REPO_SERVER_STREAMED_MANIFEST_MAX_TAR_SIZE
            valueFrom:
              configMapKeyRef:
                key: reposerver.streamed.manifest.max.tar.size
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_REPO_SERVER_STREAMED_MANIFEST_MAX_EXTRACTED_SIZE
            valueFrom:
              configMapKeyRef:
                key: reposerver.streamed.manifest.max.extracted.size
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_REPO_SERVER_HELM_MANIFEST_MAX_EXTRACTED_SIZE
            valueFrom:
              configMapKeyRef:
                key: reposerver.helm.manifest.max.extracted.size
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_REPO_SERVER_DISABLE_HELM_MANIFEST_MAX_EXTRACTED_SIZE
            valueFrom:
              configMapKeyRef:
                key: reposerver.disable.helm.manifest.max.extracted.size
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_REVISION_CACHE_LOCK_TIMEOUT
            valueFrom:
              configMapKeyRef:
                key: reposerver.revision.cache.lock.timeout
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_GIT_MODULES_ENABLED
            valueFrom:
              configMapKeyRef:
                key: reposerver.enable.git.submodule
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_GIT_LS_REMOTE_PARALLELISM_LIMIT
            valueFrom:
              configMapKeyRef:
                key: reposerver.git.lsremote.parallelism.limit
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_GIT_REQUEST_TIMEOUT
            valueFrom:
              configMapKeyRef:
                key: reposerver.git.request.timeout
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_GRPC_MAX_SIZE_MB
            valueFrom:
              configMapKeyRef:
                key: reposerver.grpc.max.size
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_REPO_SERVER_INCLUDE_HIDDEN_DIRECTORIES
            valueFrom:
              configMapKeyRef:
                key: reposerver.include.hidden.directories
                name: argocd-cmd-params-cm
                optional: true
          - name: HELM_CACHE_HOME
            value: /helm-working-dir
          - name: HELM_CONFIG_HOME
            value: /helm-working-dir
          - name: HELM_DATA_HOME
            value: /helm-working-dir
          image: quay.io/argoproj/argocd:v2.12.3
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz?full=true
              port: 8084
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 5
          name: argocd-repo-server
          ports:
          - containerPort: 8081
            protocol: TCP
          - containerPort: 8084
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 8084
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /app/config/ssh
            name: ssh-known-hosts
          - mountPath: /app/config/tls
            name: tls-certs
          - mountPath: /app/config/gpg/source
            name: gpg-keys
          - mountPath: /app/config/gpg/keys
            name: gpg-keyring
          - mountPath: /app/config/reposerver/tls
            name: argocd-repo-server-tls
          - mountPath: /tmp
            name: tmp
          - mountPath: /helm-working-dir
            name: helm-working-dir
          - mountPath: /home/argocd/cmp-server/plugins
            name: plugins
        dnsPolicy: ClusterFirst
        initContainers:
        - command:
          - /bin/cp
          - -n
          - /usr/local/bin/argocd
          - /var/run/argocd/argocd-cmp-server
          image: quay.io/argoproj/argocd:v2.12.3
          imagePullPolicy: IfNotPresent
          name: copyutil
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/run/argocd
            name: var-files
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: argocd-repo-server
        serviceAccountName: argocd-repo-server
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            name: argocd-ssh-known-hosts-cm
          name: ssh-known-hosts
        - configMap:
            defaultMode: 420
            name: argocd-tls-certs-cm
          name: tls-certs
        - configMap:
            defaultMode: 420
            name: argocd-gpg-keys-cm
          name: gpg-keys
        - emptyDir: {}
          name: gpg-keyring
        - emptyDir: {}
          name: tmp
        - emptyDir: {}
          name: helm-working-dir
        - name: argocd-repo-server-tls
          secret:
            defaultMode: 420
            items:
            - key: tls.crt
              path: tls.crt
            - key: tls.key
              path: tls.key
            - key: ca.crt
              path: ca.crt
            optional: true
            secretName: argocd-repo-server-tls
        - emptyDir: {}
          name: var-files
        - emptyDir: {}
          name: plugins
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-10-07T18:49:31Z"
    generation: 1
    labels:
      app.kubernetes.io/name: argocd-server
      pod-template-hash: 7bc7b97977
    name: argocd-server-7bc7b97977
    namespace: argocd
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: argocd-server
      uid: ff714958-daa3-477c-89c1-c6371030be2f
    resourceVersion: "712120"
    uid: 4ff642d9-8410-439b-aacc-8a5dab9b077b
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/name: argocd-server
        pod-template-hash: 7bc7b97977
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/name: argocd-server
          pod-template-hash: 7bc7b97977
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: argocd-server
                topologyKey: kubernetes.io/hostname
              weight: 100
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/part-of: argocd
                topologyKey: kubernetes.io/hostname
              weight: 5
        containers:
        - args:
          - /usr/local/bin/argocd-server
          env:
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                key: auth
                name: argocd-redis
          - name: ARGOCD_SERVER_INSECURE
            valueFrom:
              configMapKeyRef:
                key: server.insecure
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_BASEHREF
            valueFrom:
              configMapKeyRef:
                key: server.basehref
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_ROOTPATH
            valueFrom:
              configMapKeyRef:
                key: server.rootpath
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_LOGFORMAT
            valueFrom:
              configMapKeyRef:
                key: server.log.format
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_LOG_LEVEL
            valueFrom:
              configMapKeyRef:
                key: server.log.level
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_REPO_SERVER
            valueFrom:
              configMapKeyRef:
                key: repo.server
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_DEX_SERVER
            valueFrom:
              configMapKeyRef:
                key: server.dex.server
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_DISABLE_AUTH
            valueFrom:
              configMapKeyRef:
                key: server.disable.auth
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_ENABLE_GZIP
            valueFrom:
              configMapKeyRef:
                key: server.enable.gzip
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_REPO_SERVER_TIMEOUT_SECONDS
            valueFrom:
              configMapKeyRef:
                key: server.repo.server.timeout.seconds
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_X_FRAME_OPTIONS
            valueFrom:
              configMapKeyRef:
                key: server.x.frame.options
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_CONTENT_SECURITY_POLICY
            valueFrom:
              configMapKeyRef:
                key: server.content.security.policy
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_REPO_SERVER_PLAINTEXT
            valueFrom:
              configMapKeyRef:
                key: server.repo.server.plaintext
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_REPO_SERVER_STRICT_TLS
            valueFrom:
              configMapKeyRef:
                key: server.repo.server.strict.tls
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_DEX_SERVER_PLAINTEXT
            valueFrom:
              configMapKeyRef:
                key: server.dex.server.plaintext
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_DEX_SERVER_STRICT_TLS
            valueFrom:
              configMapKeyRef:
                key: server.dex.server.strict.tls
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_TLS_MIN_VERSION
            valueFrom:
              configMapKeyRef:
                key: server.tls.minversion
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_TLS_MAX_VERSION
            valueFrom:
              configMapKeyRef:
                key: server.tls.maxversion
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_TLS_CIPHERS
            valueFrom:
              configMapKeyRef:
                key: server.tls.ciphers
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_CONNECTION_STATUS_CACHE_EXPIRATION
            valueFrom:
              configMapKeyRef:
                key: server.connection.status.cache.expiration
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_OIDC_CACHE_EXPIRATION
            valueFrom:
              configMapKeyRef:
                key: server.oidc.cache.expiration
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_LOGIN_ATTEMPTS_EXPIRATION
            valueFrom:
              configMapKeyRef:
                key: server.login.attempts.expiration
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_STATIC_ASSETS
            valueFrom:
              configMapKeyRef:
                key: server.staticassets
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APP_STATE_CACHE_EXPIRATION
            valueFrom:
              configMapKeyRef:
                key: server.app.state.cache.expiration
                name: argocd-cmd-params-cm
                optional: true
          - name: REDIS_SERVER
            valueFrom:
              configMapKeyRef:
                key: redis.server
                name: argocd-cmd-params-cm
                optional: true
          - name: REDIS_COMPRESSION
            valueFrom:
              configMapKeyRef:
                key: redis.compression
                name: argocd-cmd-params-cm
                optional: true
          - name: REDISDB
            valueFrom:
              configMapKeyRef:
                key: redis.db
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_DEFAULT_CACHE_EXPIRATION
            valueFrom:
              configMapKeyRef:
                key: server.default.cache.expiration
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_MAX_COOKIE_NUMBER
            valueFrom:
              configMapKeyRef:
                key: server.http.cookie.maxnumber
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_LISTEN_ADDRESS
            valueFrom:
              configMapKeyRef:
                key: server.listen.address
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_METRICS_LISTEN_ADDRESS
            valueFrom:
              configMapKeyRef:
                key: server.metrics.listen.address
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_OTLP_ADDRESS
            valueFrom:
              configMapKeyRef:
                key: otlp.address
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_OTLP_INSECURE
            valueFrom:
              configMapKeyRef:
                key: otlp.insecure
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_OTLP_HEADERS
            valueFrom:
              configMapKeyRef:
                key: otlp.headers
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATION_NAMESPACES
            valueFrom:
              configMapKeyRef:
                key: application.namespaces
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_ENABLE_PROXY_EXTENSION
            valueFrom:
              configMapKeyRef:
                key: server.enable.proxy.extension
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_K8SCLIENT_RETRY_MAX
            valueFrom:
              configMapKeyRef:
                key: server.k8sclient.retry.max
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_K8SCLIENT_RETRY_BASE_BACKOFF
            valueFrom:
              configMapKeyRef:
                key: server.k8sclient.retry.base.backoff
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_API_CONTENT_TYPES
            valueFrom:
              configMapKeyRef:
                key: server.api.content.types
                name: argocd-cmd-params-cm
                optional: true
          image: quay.io/argoproj/argocd:v2.12.3
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz?full=true
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 3
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 5
          name: argocd-server
          ports:
          - containerPort: 8080
            protocol: TCP
          - containerPort: 8083
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 3
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /app/config/ssh
            name: ssh-known-hosts
          - mountPath: /app/config/tls
            name: tls-certs
          - mountPath: /app/config/server/tls
            name: argocd-repo-server-tls
          - mountPath: /app/config/dex/tls
            name: argocd-dex-server-tls
          - mountPath: /home/argocd
            name: plugins-home
          - mountPath: /tmp
            name: tmp
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: argocd-server
        serviceAccountName: argocd-server
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: plugins-home
        - emptyDir: {}
          name: tmp
        - configMap:
            defaultMode: 420
            name: argocd-ssh-known-hosts-cm
          name: ssh-known-hosts
        - configMap:
            defaultMode: 420
            name: argocd-tls-certs-cm
          name: tls-certs
        - name: argocd-repo-server-tls
          secret:
            defaultMode: 420
            items:
            - key: tls.crt
              path: tls.crt
            - key: tls.key
              path: tls.key
            - key: ca.crt
              path: ca.crt
            optional: true
            secretName: argocd-repo-server-tls
        - name: argocd-dex-server-tls
          secret:
            defaultMode: 420
            items:
            - key: tls.crt
              path: tls.crt
            - key: ca.crt
              path: ca.crt
            optional: true
            secretName: argocd-dex-server-tls
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"StatefulSet","metadata":{"annotations":{},"labels":{"app.kubernetes.io/component":"application-controller","app.kubernetes.io/name":"argocd-application-controller","app.kubernetes.io/part-of":"argocd"},"name":"argocd-application-controller","namespace":"argocd"},"spec":{"replicas":1,"selector":{"matchLabels":{"app.kubernetes.io/name":"argocd-application-controller"}},"serviceName":"argocd-application-controller","template":{"metadata":{"labels":{"app.kubernetes.io/name":"argocd-application-controller"}},"spec":{"affinity":{"podAntiAffinity":{"preferredDuringSchedulingIgnoredDuringExecution":[{"podAffinityTerm":{"labelSelector":{"matchLabels":{"app.kubernetes.io/name":"argocd-application-controller"}},"topologyKey":"kubernetes.io/hostname"},"weight":100},{"podAffinityTerm":{"labelSelector":{"matchLabels":{"app.kubernetes.io/part-of":"argocd"}},"topologyKey":"kubernetes.io/hostname"},"weight":5}]}},"containers":[{"args":["/usr/local/bin/argocd-application-controller"],"env":[{"name":"REDIS_PASSWORD","valueFrom":{"secretKeyRef":{"key":"auth","name":"argocd-redis"}}},{"name":"ARGOCD_CONTROLLER_REPLICAS","value":"1"},{"name":"ARGOCD_RECONCILIATION_TIMEOUT","valueFrom":{"configMapKeyRef":{"key":"timeout.reconciliation","name":"argocd-cm","optional":true}}},{"name":"ARGOCD_HARD_RECONCILIATION_TIMEOUT","valueFrom":{"configMapKeyRef":{"key":"timeout.hard.reconciliation","name":"argocd-cm","optional":true}}},{"name":"ARGOCD_RECONCILIATION_JITTER","valueFrom":{"configMapKeyRef":{"key":"timeout.reconciliation.jitter","name":"argocd-cm","optional":true}}},{"name":"ARGOCD_REPO_ERROR_GRACE_PERIOD_SECONDS","valueFrom":{"configMapKeyRef":{"key":"controller.repo.error.grace.period.seconds","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_APPLICATION_CONTROLLER_REPO_SERVER","valueFrom":{"configMapKeyRef":{"key":"repo.server","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_APPLICATION_CONTROLLER_REPO_SERVER_TIMEOUT_SECONDS","valueFrom":{"configMapKeyRef":{"key":"controller.repo.server.timeout.seconds","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_APPLICATION_CONTROLLER_STATUS_PROCESSORS","valueFrom":{"configMapKeyRef":{"key":"controller.status.processors","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_APPLICATION_CONTROLLER_OPERATION_PROCESSORS","valueFrom":{"configMapKeyRef":{"key":"controller.operation.processors","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_APPLICATION_CONTROLLER_LOGFORMAT","valueFrom":{"configMapKeyRef":{"key":"controller.log.format","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_APPLICATION_CONTROLLER_LOGLEVEL","valueFrom":{"configMapKeyRef":{"key":"controller.log.level","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_APPLICATION_CONTROLLER_METRICS_CACHE_EXPIRATION","valueFrom":{"configMapKeyRef":{"key":"controller.metrics.cache.expiration","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_APPLICATION_CONTROLLER_SELF_HEAL_TIMEOUT_SECONDS","valueFrom":{"configMapKeyRef":{"key":"controller.self.heal.timeout.seconds","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_APPLICATION_CONTROLLER_REPO_SERVER_PLAINTEXT","valueFrom":{"configMapKeyRef":{"key":"controller.repo.server.plaintext","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_APPLICATION_CONTROLLER_REPO_SERVER_STRICT_TLS","valueFrom":{"configMapKeyRef":{"key":"controller.repo.server.strict.tls","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_APPLICATION_CONTROLLER_PERSIST_RESOURCE_HEALTH","valueFrom":{"configMapKeyRef":{"key":"controller.resource.health.persist","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_APP_STATE_CACHE_EXPIRATION","valueFrom":{"configMapKeyRef":{"key":"controller.app.state.cache.expiration","name":"argocd-cmd-params-cm","optional":true}}},{"name":"REDIS_SERVER","valueFrom":{"configMapKeyRef":{"key":"redis.server","name":"argocd-cmd-params-cm","optional":true}}},{"name":"REDIS_COMPRESSION","valueFrom":{"configMapKeyRef":{"key":"redis.compression","name":"argocd-cmd-params-cm","optional":true}}},{"name":"REDISDB","valueFrom":{"configMapKeyRef":{"key":"redis.db","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_DEFAULT_CACHE_EXPIRATION","valueFrom":{"configMapKeyRef":{"key":"controller.default.cache.expiration","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_APPLICATION_CONTROLLER_OTLP_ADDRESS","valueFrom":{"configMapKeyRef":{"key":"otlp.address","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_APPLICATION_CONTROLLER_OTLP_INSECURE","valueFrom":{"configMapKeyRef":{"key":"otlp.insecure","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_APPLICATION_CONTROLLER_OTLP_HEADERS","valueFrom":{"configMapKeyRef":{"key":"otlp.headers","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_APPLICATION_NAMESPACES","valueFrom":{"configMapKeyRef":{"key":"application.namespaces","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_CONTROLLER_SHARDING_ALGORITHM","valueFrom":{"configMapKeyRef":{"key":"controller.sharding.algorithm","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_APPLICATION_CONTROLLER_KUBECTL_PARALLELISM_LIMIT","valueFrom":{"configMapKeyRef":{"key":"controller.kubectl.parallelism.limit","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_K8SCLIENT_RETRY_MAX","valueFrom":{"configMapKeyRef":{"key":"controller.k8sclient.retry.max","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_K8SCLIENT_RETRY_BASE_BACKOFF","valueFrom":{"configMapKeyRef":{"key":"controller.k8sclient.retry.base.backoff","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_APPLICATION_CONTROLLER_SERVER_SIDE_DIFF","valueFrom":{"configMapKeyRef":{"key":"controller.diff.server.side","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_IGNORE_NORMALIZER_JQ_TIMEOUT","valueFrom":{"configMapKeyRef":{"key":"controller.ignore.normalizer.jq.timeout","name":"argocd-cmd-params-cm","optional":true}}}],"image":"quay.io/argoproj/argocd:v2.12.3","imagePullPolicy":"Always","name":"argocd-application-controller","ports":[{"containerPort":8082}],"readinessProbe":{"httpGet":{"path":"/healthz","port":8082},"initialDelaySeconds":5,"periodSeconds":10},"securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"drop":["ALL"]},"readOnlyRootFilesystem":true,"runAsNonRoot":true,"seccompProfile":{"type":"RuntimeDefault"}},"volumeMounts":[{"mountPath":"/app/config/controller/tls","name":"argocd-repo-server-tls"},{"mountPath":"/home/argocd","name":"argocd-home"}],"workingDir":"/home/argocd"}],"serviceAccountName":"argocd-application-controller","volumes":[{"emptyDir":{},"name":"argocd-home"},{"name":"argocd-repo-server-tls","secret":{"items":[{"key":"tls.crt","path":"tls.crt"},{"key":"tls.key","path":"tls.key"},{"key":"ca.crt","path":"ca.crt"}],"optional":true,"secretName":"argocd-repo-server-tls"}}]}}}}
    creationTimestamp: "2024-10-07T18:49:31Z"
    generation: 1
    labels:
      app.kubernetes.io/component: application-controller
      app.kubernetes.io/name: argocd-application-controller
      app.kubernetes.io/part-of: argocd
    name: argocd-application-controller
    namespace: argocd
    resourceVersion: "712128"
    uid: 50a068b9-3d28-411a-842b-719e1c15596f
  spec:
    persistentVolumeClaimRetentionPolicy:
      whenDeleted: Retain
      whenScaled: Retain
    podManagementPolicy: OrderedReady
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/name: argocd-application-controller
    serviceName: argocd-application-controller
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/name: argocd-application-controller
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: argocd-application-controller
                topologyKey: kubernetes.io/hostname
              weight: 100
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/part-of: argocd
                topologyKey: kubernetes.io/hostname
              weight: 5
        containers:
        - args:
          - /usr/local/bin/argocd-application-controller
          env:
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                key: auth
                name: argocd-redis
          - name: ARGOCD_CONTROLLER_REPLICAS
            value: "1"
          - name: ARGOCD_RECONCILIATION_TIMEOUT
            valueFrom:
              configMapKeyRef:
                key: timeout.reconciliation
                name: argocd-cm
                optional: true
          - name: ARGOCD_HARD_RECONCILIATION_TIMEOUT
            valueFrom:
              configMapKeyRef:
                key: timeout.hard.reconciliation
                name: argocd-cm
                optional: true
          - name: ARGOCD_RECONCILIATION_JITTER
            valueFrom:
              configMapKeyRef:
                key: timeout.reconciliation.jitter
                name: argocd-cm
                optional: true
          - name: ARGOCD_REPO_ERROR_GRACE_PERIOD_SECONDS
            valueFrom:
              configMapKeyRef:
                key: controller.repo.error.grace.period.seconds
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATION_CONTROLLER_REPO_SERVER
            valueFrom:
              configMapKeyRef:
                key: repo.server
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATION_CONTROLLER_REPO_SERVER_TIMEOUT_SECONDS
            valueFrom:
              configMapKeyRef:
                key: controller.repo.server.timeout.seconds
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATION_CONTROLLER_STATUS_PROCESSORS
            valueFrom:
              configMapKeyRef:
                key: controller.status.processors
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATION_CONTROLLER_OPERATION_PROCESSORS
            valueFrom:
              configMapKeyRef:
                key: controller.operation.processors
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATION_CONTROLLER_LOGFORMAT
            valueFrom:
              configMapKeyRef:
                key: controller.log.format
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATION_CONTROLLER_LOGLEVEL
            valueFrom:
              configMapKeyRef:
                key: controller.log.level
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATION_CONTROLLER_METRICS_CACHE_EXPIRATION
            valueFrom:
              configMapKeyRef:
                key: controller.metrics.cache.expiration
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATION_CONTROLLER_SELF_HEAL_TIMEOUT_SECONDS
            valueFrom:
              configMapKeyRef:
                key: controller.self.heal.timeout.seconds
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATION_CONTROLLER_REPO_SERVER_PLAINTEXT
            valueFrom:
              configMapKeyRef:
                key: controller.repo.server.plaintext
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATION_CONTROLLER_REPO_SERVER_STRICT_TLS
            valueFrom:
              configMapKeyRef:
                key: controller.repo.server.strict.tls
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATION_CONTROLLER_PERSIST_RESOURCE_HEALTH
            valueFrom:
              configMapKeyRef:
                key: controller.resource.health.persist
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APP_STATE_CACHE_EXPIRATION
            valueFrom:
              configMapKeyRef:
                key: controller.app.state.cache.expiration
                name: argocd-cmd-params-cm
                optional: true
          - name: REDIS_SERVER
            valueFrom:
              configMapKeyRef:
                key: redis.server
                name: argocd-cmd-params-cm
                optional: true
          - name: REDIS_COMPRESSION
            valueFrom:
              configMapKeyRef:
                key: redis.compression
                name: argocd-cmd-params-cm
                optional: true
          - name: REDISDB
            valueFrom:
              configMapKeyRef:
                key: redis.db
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_DEFAULT_CACHE_EXPIRATION
            valueFrom:
              configMapKeyRef:
                key: controller.default.cache.expiration
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATION_CONTROLLER_OTLP_ADDRESS
            valueFrom:
              configMapKeyRef:
                key: otlp.address
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATION_CONTROLLER_OTLP_INSECURE
            valueFrom:
              configMapKeyRef:
                key: otlp.insecure
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATION_CONTROLLER_OTLP_HEADERS
            valueFrom:
              configMapKeyRef:
                key: otlp.headers
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATION_NAMESPACES
            valueFrom:
              configMapKeyRef:
                key: application.namespaces
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_CONTROLLER_SHARDING_ALGORITHM
            valueFrom:
              configMapKeyRef:
                key: controller.sharding.algorithm
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATION_CONTROLLER_KUBECTL_PARALLELISM_LIMIT
            valueFrom:
              configMapKeyRef:
                key: controller.kubectl.parallelism.limit
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_K8SCLIENT_RETRY_MAX
            valueFrom:
              configMapKeyRef:
                key: controller.k8sclient.retry.max
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_K8SCLIENT_RETRY_BASE_BACKOFF
            valueFrom:
              configMapKeyRef:
                key: controller.k8sclient.retry.base.backoff
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATION_CONTROLLER_SERVER_SIDE_DIFF
            valueFrom:
              configMapKeyRef:
                key: controller.diff.server.side
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_IGNORE_NORMALIZER_JQ_TIMEOUT
            valueFrom:
              configMapKeyRef:
                key: controller.ignore.normalizer.jq.timeout
                name: argocd-cmd-params-cm
                optional: true
          image: quay.io/argoproj/argocd:v2.12.3
          imagePullPolicy: Always
          name: argocd-application-controller
          ports:
          - containerPort: 8082
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 8082
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /app/config/controller/tls
            name: argocd-repo-server-tls
          - mountPath: /home/argocd
            name: argocd-home
          workingDir: /home/argocd
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: argocd-application-controller
        serviceAccountName: argocd-application-controller
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: argocd-home
        - name: argocd-repo-server-tls
          secret:
            defaultMode: 420
            items:
            - key: tls.crt
              path: tls.crt
            - key: tls.key
              path: tls.key
            - key: ca.crt
              path: ca.crt
            optional: true
            secretName: argocd-repo-server-tls
    updateStrategy:
      rollingUpdate:
        partition: 0
      type: RollingUpdate
  status:
    availableReplicas: 1
    collisionCount: 0
    currentReplicas: 1
    currentRevision: argocd-application-controller-9f5c5c7c8
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updateRevision: argocd-application-controller-9f5c5c7c8
    updatedReplicas: 1
kind: List
metadata:
  resourceVersion: ""
